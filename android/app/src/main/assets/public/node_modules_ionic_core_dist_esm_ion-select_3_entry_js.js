"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-select_3_entry_js"],{

/***/ 8179:
/*!*****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-select_3.entry.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_select": () => (/* binding */ Select),
/* harmony export */   "ion_select_option": () => (/* binding */ SelectOption),
/* harmony export */   "ion_select_popover": () => (/* binding */ SelectPopover)
/* harmony export */ });
/* harmony import */ var C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-1a99aeb7.js */ 4895);
/* harmony import */ var _ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-04e268e7.js */ 2107);
/* harmony import */ var _helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers-4d272360.js */ 9158);
/* harmony import */ var _overlays_f469834d_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlays-f469834d.js */ 6938);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./theme-7670341c.js */ 320);
/* harmony import */ var _hardware_back_button_490df115_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hardware-back-button-490df115.js */ 159);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */







const watchForOptions = (containerEl, tagName, onChange) => {
  if (typeof MutationObserver === 'undefined') {
    return;
  }

  const mutation = new MutationObserver(mutationList => {
    onChange(getSelectedOption(mutationList, tagName));
  });
  mutation.observe(containerEl, {
    childList: true,
    subtree: true
  });
  return mutation;
};

const getSelectedOption = (mutationList, tagName) => {
  let newOption;
  mutationList.forEach(mut => {
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (let i = 0; i < mut.addedNodes.length; i++) {
      newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;
    }
  });
  return newOption;
};

const findCheckedOption = (el, tagName) => {
  if (el.nodeType !== 1) {
    return undefined;
  }

  const options = el.tagName === tagName.toUpperCase() ? [el] : Array.from(el.querySelectorAll(tagName));
  return options.find(o => o.value === el.value);
};

const selectIosCss = ":host{--placeholder-color:currentColor;--placeholder-opacity:0.33;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;font-family:var(--ion-font-family, inherit);overflow:hidden;z-index:2}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.in-item){position:static;max-width:45%}:host(.select-disabled){opacity:0.4;pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}.select-placeholder{color:var(--placeholder-color);opacity:var(--placeholder-opacity)}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}button{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}.select-icon{position:relative}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.select-icon-inner{left:5px;top:50%;margin-top:-2px;position:absolute;width:0;height:0;border-top:5px solid;border-right:5px solid transparent;border-left:5px solid transparent;color:currentColor;pointer-events:none}[dir=rtl] .select-icon-inner,:host-context([dir=rtl]) .select-icon-inner{left:unset;right:unset;right:5px}:host{--padding-top:10px;--padding-end:10px;--padding-bottom:10px;--padding-start:20px}.select-icon{width:12px;height:18px;opacity:0.33}";
const selectMdCss = ":host{--placeholder-color:currentColor;--placeholder-opacity:0.33;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;font-family:var(--ion-font-family, inherit);overflow:hidden;z-index:2}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}:host(.in-item){position:static;max-width:45%}:host(.select-disabled){opacity:0.4;pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}.select-placeholder{color:var(--placeholder-color);opacity:var(--placeholder-opacity)}label{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}[dir=rtl] label,:host-context([dir=rtl]) label{left:unset;right:unset;right:0}label::-moz-focus-inner{border:0}button{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}.select-icon{position:relative}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.select-icon-inner{left:5px;top:50%;margin-top:-2px;position:absolute;width:0;height:0;border-top:5px solid;border-right:5px solid transparent;border-left:5px solid transparent;color:currentColor;pointer-events:none}[dir=rtl] .select-icon-inner,:host-context([dir=rtl]) .select-icon-inner{left:unset;right:unset;right:5px}:host{--padding-top:10px;--padding-end:0;--padding-bottom:10px;--padding-start:16px}.select-icon{width:19px;height:19px;-webkit-transition:-webkit-transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);transition:-webkit-transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);transition:transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);transition:transform 0.15s cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);opacity:0.55}:host-context(.item-label-stacked) .select-icon,:host-context(.item-label-floating:not(.item-fill-outline)) .select-icon,:host-context(.item-label-floating.item-fill-outline){-webkit-transform:translate3d(0,  -9px,  0);transform:translate3d(0,  -9px,  0)}:host-context(.item-has-focus) .select-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}:host-context(.item-has-focus.item-label-stacked) .select-icon,:host-context(.item-has-focus.item-label-floating:not(.item-fill-outline)) .select-icon{-webkit-transform:translate3d(0,  -9px,  0) rotate(180deg);transform:translate3d(0,  -9px,  0) rotate(180deg)}:host-context(ion-item.ion-focused) .select-icon,:host-context(.item-has-focus) .select-icon{color:var(--highlight-color-focused);opacity:1}";
const Select = class {
  constructor(hostRef) {
    (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionChange = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionChange", 7);
    this.ionCancel = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionCancel", 7);
    this.ionDismiss = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionDismiss", 7);
    this.ionFocus = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionFocus", 7);
    this.ionBlur = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionBlur", 7);
    this.ionStyle = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionStyle", 7);
    this.inputId = `ion-sel-${selectIds++}`;
    this.didInit = false;
    this.isExpanded = false;
    /**
     * If `true`, the user cannot interact with the select.
     */

    this.disabled = false;
    /**
     * The text to display on the cancel button.
     */

    this.cancelText = 'Cancel';
    /**
     * The text to display on the ok button.
     */

    this.okText = 'OK';
    /**
     * The name of the control, which is submitted with the form data.
     */

    this.name = this.inputId;
    /**
     * If `true`, the select can accept multiple values.
     */

    this.multiple = false;
    /**
     * The interface the select should use: `action-sheet`, `popover` or `alert`.
     */

    this.interface = 'alert';
    /**
     * Any additional options that the `alert`, `action-sheet` or `popover` interface
     * can take. See the [ion-alert docs](./alert), the
     * [ion-action-sheet docs](./action-sheet) and the
     * [ion-popover docs](./popover) for the
     * create options for each interface.
     *
     * Note: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.
     */

    this.interfaceOptions = {};

    this.onClick = ev => {
      this.setFocus();
      this.open(ev);
    };

    this.onFocus = () => {
      this.ionFocus.emit();
    };

    this.onBlur = () => {
      this.ionBlur.emit();
    };
  }

  styleChanged() {
    this.emitStyle();
  }

  valueChanged() {
    this.emitStyle(); // TODO: FW-1160 - Remove the `didInit` property when ionChange behavior is changed in v7.

    if (this.didInit) {
      this.ionChange.emit({
        value: this.value
      });
    }
  }

  connectedCallback() {
    var _this = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.updateOverlayOptions();

      _this.emitStyle();

      _this.mutationO = watchForOptions(_this.el, 'ion-select-option', /*#__PURE__*/(0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        _this.updateOverlayOptions();
      }));
    })();
  }

  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }

  componentDidLoad() {
    this.didInit = true;
  }
  /**
   * Open the select overlay. The overlay is either an alert, action sheet, or popover,
   * depending on the `interface` property on the `ion-select`.
   *
   * @param event The user interface event that called the open.
   */


  open(event) {
    var _this2 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.disabled || _this2.isExpanded) {
        return undefined;
      }

      _this2.isExpanded = true;
      const overlay = _this2.overlay = yield _this2.createOverlay(event);
      overlay.onDidDismiss().then(() => {
        _this2.overlay = undefined;
        _this2.isExpanded = false;

        _this2.ionDismiss.emit();

        _this2.setFocus();
      });
      yield overlay.present(); // focus selected option for popovers

      if (_this2.interface === 'popover') {
        let indexOfSelected = _this2.childOpts.map(o => o.value).indexOf(_this2.value);

        indexOfSelected = indexOfSelected > -1 ? indexOfSelected : 0; // default to first option if nothing selected

        const selectedEl = overlay.querySelector(`.select-interface-option:nth-child(${indexOfSelected + 1})`);

        if (selectedEl) {
          (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__.f)(selectedEl);
        }
      }

      return overlay;
    })();
  }

  createOverlay(ev) {
    let selectInterface = this.interface;

    if (selectInterface === 'action-sheet' && this.multiple) {
      console.warn(`Select interface cannot be "${selectInterface}" with a multi-value select. Using the "alert" interface instead.`);
      selectInterface = 'alert';
    }

    if (selectInterface === 'popover' && !ev) {
      console.warn(`Select interface cannot be a "${selectInterface}" without passing an event. Using the "alert" interface instead.`);
      selectInterface = 'alert';
    }

    if (selectInterface === 'action-sheet') {
      return this.openActionSheet();
    }

    if (selectInterface === 'popover') {
      return this.openPopover(ev);
    }

    return this.openAlert();
  }

  updateOverlayOptions() {
    const overlay = this.overlay;

    if (!overlay) {
      return;
    }

    const childOpts = this.childOpts;
    const value = this.value;

    switch (this.interface) {
      case 'action-sheet':
        overlay.buttons = this.createActionSheetButtons(childOpts, value);
        break;

      case 'popover':
        const popover = overlay.querySelector('ion-select-popover');

        if (popover) {
          popover.options = this.createPopoverOptions(childOpts, value);
        }

        break;

      case 'alert':
        const inputType = this.multiple ? 'checkbox' : 'radio';
        overlay.inputs = this.createAlertInputs(childOpts, inputType, value);
        break;
    }
  }

  createActionSheetButtons(data, selectValue) {
    const actionSheetButtons = data.map(option => {
      const value = getOptionValue(option); // Remove hydrated before copying over classes

      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');
      const optClass = `${OPTION_CLASS} ${copyClasses}`;
      return {
        role: isOptionSelected(selectValue, value, this.compareWith) ? 'selected' : '',
        text: option.textContent,
        cssClass: optClass,
        handler: () => {
          this.value = value;
        }
      };
    }); // Add "cancel" button

    actionSheetButtons.push({
      text: this.cancelText,
      role: 'cancel',
      handler: () => {
        this.ionCancel.emit();
      }
    });
    return actionSheetButtons;
  }

  createAlertInputs(data, inputType, selectValue) {
    const alertInputs = data.map(option => {
      const value = getOptionValue(option); // Remove hydrated before copying over classes

      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');
      const optClass = `${OPTION_CLASS} ${copyClasses}`;
      return {
        type: inputType,
        cssClass: optClass,
        label: option.textContent || '',
        value,
        checked: isOptionSelected(selectValue, value, this.compareWith),
        disabled: option.disabled
      };
    });
    return alertInputs;
  }

  createPopoverOptions(data, selectValue) {
    const popoverOptions = data.map(option => {
      const value = getOptionValue(option); // Remove hydrated before copying over classes

      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');
      const optClass = `${OPTION_CLASS} ${copyClasses}`;
      return {
        text: option.textContent || '',
        cssClass: optClass,
        value,
        checked: isOptionSelected(selectValue, value, this.compareWith),
        disabled: option.disabled,
        handler: selected => {
          this.value = selected;

          if (!this.multiple) {
            this.close();
          }
        }
      };
    });
    return popoverOptions;
  }

  openPopover(ev) {
    var _this3 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const interfaceOptions = _this3.interfaceOptions;
      const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this3);
      const showBackdrop = mode === 'md' ? false : true;
      const multiple = _this3.multiple;
      const value = _this3.value;
      let event = ev;
      let size = 'auto';

      const item = _this3.el.closest('ion-item'); // If the select is inside of an item containing a floating
      // or stacked label then the popover should take up the
      // full width of the item when it presents


      if (item && (item.classList.contains('item-label-floating') || item.classList.contains('item-label-stacked'))) {
        event = Object.assign(Object.assign({}, ev), {
          detail: {
            ionShadowTarget: item
          }
        });
        size = 'cover';
      }

      const popoverOpts = Object.assign(Object.assign({
        mode,
        event,
        alignment: 'center',
        size,
        showBackdrop
      }, interfaceOptions), {
        component: 'ion-select-popover',
        cssClass: ['select-popover', interfaceOptions.cssClass],
        componentProps: {
          header: interfaceOptions.header,
          subHeader: interfaceOptions.subHeader,
          message: interfaceOptions.message,
          multiple,
          value,
          options: _this3.createPopoverOptions(_this3.childOpts, value)
        }
      });
      return _overlays_f469834d_js__WEBPACK_IMPORTED_MODULE_4__.c.create(popoverOpts);
    })();
  }

  openActionSheet() {
    var _this4 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this4);
      const interfaceOptions = _this4.interfaceOptions;
      const actionSheetOpts = Object.assign(Object.assign({
        mode
      }, interfaceOptions), {
        buttons: _this4.createActionSheetButtons(_this4.childOpts, _this4.value),
        cssClass: ['select-action-sheet', interfaceOptions.cssClass]
      });
      return _overlays_f469834d_js__WEBPACK_IMPORTED_MODULE_4__.b.create(actionSheetOpts);
    })();
  }

  openAlert() {
    var _this5 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const label = _this5.getLabel();

      const labelText = label ? label.textContent : null;
      const interfaceOptions = _this5.interfaceOptions;
      const inputType = _this5.multiple ? 'checkbox' : 'radio';
      const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this5);
      const alertOpts = Object.assign(Object.assign({
        mode
      }, interfaceOptions), {
        header: interfaceOptions.header ? interfaceOptions.header : labelText,
        inputs: _this5.createAlertInputs(_this5.childOpts, inputType, _this5.value),
        buttons: [{
          text: _this5.cancelText,
          role: 'cancel',
          handler: () => {
            _this5.ionCancel.emit();
          }
        }, {
          text: _this5.okText,
          handler: selectedValues => {
            _this5.value = selectedValues;
          }
        }],
        cssClass: ['select-alert', interfaceOptions.cssClass, _this5.multiple ? 'multiple-select-alert' : 'single-select-alert']
      });
      return _overlays_f469834d_js__WEBPACK_IMPORTED_MODULE_4__.a.create(alertOpts);
    })();
  }
  /**
   * Close the select interface.
   */


  close() {
    // TODO check !this.overlay || !this.isFocus()
    if (!this.overlay) {
      return Promise.resolve(false);
    }

    return this.overlay.dismiss();
  }

  getLabel() {
    return (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__.k)(this.el);
  }

  hasValue() {
    return this.getText() !== '';
  }

  get childOpts() {
    return Array.from(this.el.querySelectorAll('ion-select-option'));
  }

  getText() {
    const selectedText = this.selectedText;

    if (selectedText != null && selectedText !== '') {
      return selectedText;
    }

    return generateText(this.childOpts, this.value, this.compareWith);
  }

  setFocus() {
    if (this.focusEl) {
      this.focusEl.focus();
    }
  }

  emitStyle() {
    this.ionStyle.emit({
      interactive: true,
      'interactive-disabled': this.disabled,
      select: true,
      'select-disabled': this.disabled,
      'has-placeholder': this.placeholder !== undefined,
      'has-value': this.hasValue(),
      'has-focus': this.isExpanded
    });
  }

  render() {
    const {
      disabled,
      el,
      inputId,
      isExpanded,
      name,
      placeholder,
      value
    } = this;
    const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const {
      labelText,
      labelId
    } = (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__.d)(el, inputId);
    (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_3__.e)(true, el, name, parseValue(value), disabled);
    const displayValue = this.getText();
    let addPlaceholderClass = false;
    let selectText = displayValue;

    if (selectText === '' && placeholder !== undefined) {
      selectText = placeholder;
      addPlaceholderClass = true;
    }

    const selectTextClasses = {
      'select-text': true,
      'select-placeholder': addPlaceholderClass
    };
    const textPart = addPlaceholderClass ? 'placeholder' : 'text'; // If there is a label then we need to concatenate it with the
    // current value (or placeholder) and a comma so it separates
    // nicely when the screen reader announces it, otherwise just
    // announce the value / placeholder

    const displayLabel = labelText !== undefined ? selectText !== '' ? `${selectText}, ${labelText}` : labelText : selectText;
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick,
      role: "button",
      "aria-haspopup": "listbox",
      "aria-disabled": disabled ? 'true' : null,
      "aria-label": displayLabel,
      class: {
        [mode]: true,
        'in-item': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.h)('ion-item', el),
        'select-disabled': disabled,
        'select-expanded': isExpanded
      }
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      "aria-hidden": "true",
      class: selectTextClasses,
      part: textPart
    }, selectText), (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "select-icon",
      role: "presentation",
      part: "icon"
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "select-icon-inner"
    })), (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("label", {
      id: labelId
    }, displayLabel), (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
      type: "button",
      disabled: disabled,
      id: inputId,
      "aria-labelledby": labelId,
      "aria-haspopup": "listbox",
      "aria-expanded": `${isExpanded}`,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      ref: focusEl => this.focusEl = focusEl
    }));
  }

  get el() {
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

  static get watchers() {
    return {
      "disabled": ["styleChanged"],
      "placeholder": ["styleChanged"],
      "isExpanded": ["styleChanged"],
      "value": ["valueChanged"]
    };
  }

};

const isOptionSelected = (currentValue, compareValue, compareWith) => {
  if (currentValue === undefined) {
    return false;
  }

  if (Array.isArray(currentValue)) {
    return currentValue.some(val => compareOptions(val, compareValue, compareWith));
  } else {
    return compareOptions(currentValue, compareValue, compareWith);
  }
};

const getOptionValue = el => {
  const value = el.value;
  return value === undefined ? el.textContent || '' : value;
};

const parseValue = value => {
  if (value == null) {
    return undefined;
  }

  if (Array.isArray(value)) {
    return value.join(',');
  }

  return value.toString();
};

const compareOptions = (currentValue, compareValue, compareWith) => {
  if (typeof compareWith === 'function') {
    return compareWith(currentValue, compareValue);
  } else if (typeof compareWith === 'string') {
    return currentValue[compareWith] === compareValue[compareWith];
  } else {
    return Array.isArray(compareValue) ? compareValue.includes(currentValue) : currentValue === compareValue;
  }
};

const generateText = (opts, value, compareWith) => {
  if (value === undefined) {
    return '';
  }

  if (Array.isArray(value)) {
    return value.map(v => textForValue(opts, v, compareWith)).filter(opt => opt !== null).join(', ');
  } else {
    return textForValue(opts, value, compareWith) || '';
  }
};

const textForValue = (opts, value, compareWith) => {
  const selectOpt = opts.find(opt => {
    return compareOptions(value, getOptionValue(opt), compareWith);
  });
  return selectOpt ? selectOpt.textContent : null;
};

let selectIds = 0;
const OPTION_CLASS = 'select-interface-option';
Select.style = {
  ios: selectIosCss,
  md: selectMdCss
};
const selectOptionCss = ":host{display:none}";
const SelectOption = class {
  constructor(hostRef) {
    (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.inputId = `ion-selopt-${selectOptionIds++}`;
    /**
     * If `true`, the user cannot interact with the select option. This property does not apply when `interface="action-sheet"` as `ion-action-sheet` does not allow for disabled buttons.
     */

    this.disabled = false;
  }

  render() {
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      role: "option",
      id: this.inputId,
      class: (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(this)
    });
  }

  get el() {
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

};
let selectOptionIds = 0;
SelectOption.style = selectOptionCss;
const selectPopoverIosCss = ".sc-ion-select-popover-ios-h ion-list.sc-ion-select-popover-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}ion-list-header.sc-ion-select-popover-ios,ion-label.sc-ion-select-popover-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}";
const selectPopoverMdCss = ".sc-ion-select-popover-md-h ion-list.sc-ion-select-popover-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}ion-list-header.sc-ion-select-popover-md,ion-label.sc-ion-select-popover-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}ion-list.sc-ion-select-popover-md ion-radio.sc-ion-select-popover-md{opacity:0}ion-item.sc-ion-select-popover-md{--inner-border-width:0}.item-radio-checked.sc-ion-select-popover-md{--background:rgba(var(--ion-color-primary-rgb, 56, 128, 255), 0.08);--background-focused:var(--ion-color-primary, #3880ff);--background-focused-opacity:0.2;--background-hover:var(--ion-color-primary, #3880ff);--background-hover-opacity:0.12}.item-checkbox-checked.sc-ion-select-popover-md{--background-activated:var(--ion-item-color, var(--ion-text-color, #000));--background-focused:var(--ion-item-color, var(--ion-text-color, #000));--background-hover:var(--ion-item-color, var(--ion-text-color, #000));--color:var(--ion-color-primary, #3880ff)}";
const SelectPopover = class {
  constructor(hostRef) {
    (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /**
     * An array of options for the popover
     */

    this.options = [];
  }

  onSelect(ev) {
    this.setChecked(ev);
    this.callOptionHandler(ev);
  }

  findOptionFromEvent(ev) {
    const {
      options
    } = this;
    return options.find(o => o.value === ev.target.value);
  }
  /**
   * When an option is selected we need to get the value(s)
   * of the selected option(s) and return it in the option
   * handler
   */


  callOptionHandler(ev) {
    const option = this.findOptionFromEvent(ev);
    const values = this.getValues(ev);

    if (option === null || option === void 0 ? void 0 : option.handler) {
      (0,_overlays_f469834d_js__WEBPACK_IMPORTED_MODULE_4__.s)(option.handler, values);
    }
  }
  /**
   * This is required when selecting a radio that is already
   * selected because it will not trigger the ionChange event
   * but we still want to close the popover
   */


  rbClick(ev) {
    this.callOptionHandler(ev);
  }

  setChecked(ev) {
    const {
      multiple
    } = this;
    const option = this.findOptionFromEvent(ev); // this is a popover with checkboxes (multiple value select)
    // we need to set the checked value for this option

    if (multiple && option) {
      option.checked = ev.detail.checked;
    }
  }

  getValues(ev) {
    const {
      multiple,
      options
    } = this;

    if (multiple) {
      // this is a popover with checkboxes (multiple value select)
      // return an array of all the checked values
      return options.filter(o => o.checked).map(o => o.value);
    } // this is a popover with radio buttons (single value select)
    // return the value that was clicked, otherwise undefined


    const option = this.findOptionFromEvent(ev);
    return option ? option.value : undefined;
  }

  renderOptions(options) {
    const {
      multiple
    } = this;

    switch (multiple) {
      case true:
        return this.renderCheckboxOptions(options);

      default:
        return this.renderRadioOptions(options);
    }
  }

  renderCheckboxOptions(options) {
    return options.map(option => (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-item", {
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.g)(option.cssClass)
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-checkbox", {
      slot: "start",
      value: option.value,
      disabled: option.disabled,
      checked: option.checked
    }), (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-label", null, option.text)));
  }

  renderRadioOptions(options) {
    const checked = options.filter(o => o.checked).map(o => o.value)[0];
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-radio-group", {
      value: checked
    }, options.map(option => (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-item", {
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.g)(option.cssClass)
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-label", null, option.text), (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-radio", {
      value: option.value,
      disabled: option.disabled,
      onClick: ev => this.rbClick(ev)
    }))));
  }

  render() {
    const {
      header,
      message,
      options,
      subHeader
    } = this;
    const hasSubHeaderOrMessage = subHeader !== undefined || message !== undefined;
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(this)
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-list", null, header !== undefined && (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-list-header", null, header), hasSubHeaderOrMessage && (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-item", null, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-label", {
      class: "ion-text-wrap"
    }, subHeader !== undefined && (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("h3", null, subHeader), message !== undefined && (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("p", null, message))), this.renderOptions(options)));
  }

};
SelectPopover.style = {
  ios: selectPopoverIosCss,
  md: selectPopoverMdCss
};


/***/ }),

/***/ 320:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createColorClasses),
/* harmony export */   "g": () => (/* binding */ getClassMap),
/* harmony export */   "h": () => (/* binding */ hostContext),
/* harmony export */   "o": () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */


const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};

const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }

  return [];
};

const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};

const SCHEME = /^[a-z][a-z0-9+\-.]*:/;

const openURL = /*#__PURE__*/function () {
  var _ref = (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');

      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }

        return router.push(url, direction, animation);
      }
    }

    return false;
  });

  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLXNlbGVjdF8zX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNNEIsZUFBZSxHQUFHLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxFQUF1QkMsUUFBdkIsS0FBb0M7RUFDMUQsSUFBSSxPQUFPQyxnQkFBUCxLQUE0QixXQUFoQyxFQUE2QztJQUMzQztFQUNEOztFQUNELE1BQU1DLFFBQVEsR0FBRyxJQUFJRCxnQkFBSixDQUFzQkUsWUFBRCxJQUFrQjtJQUN0REgsUUFBUSxDQUFDSSxpQkFBaUIsQ0FBQ0QsWUFBRCxFQUFlSixPQUFmLENBQWxCLENBQVI7RUFDRCxDQUZnQixDQUFqQjtFQUdBRyxRQUFRLENBQUNHLE9BQVQsQ0FBaUJQLFdBQWpCLEVBQThCO0lBQzVCUSxTQUFTLEVBQUUsSUFEaUI7SUFFNUJDLE9BQU8sRUFBRTtFQUZtQixDQUE5QjtFQUlBLE9BQU9MLFFBQVA7QUFDRCxDQVpEOztBQWFBLE1BQU1FLGlCQUFpQixHQUFHLENBQUNELFlBQUQsRUFBZUosT0FBZixLQUEyQjtFQUNuRCxJQUFJUyxTQUFKO0VBQ0FMLFlBQVksQ0FBQ00sT0FBYixDQUFzQkMsR0FBRCxJQUFTO0lBQzVCO0lBQ0EsS0FBSyxJQUFJbEMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2tDLEdBQUcsQ0FBQ0MsVUFBSixDQUFlQyxNQUFuQyxFQUEyQ3BDLENBQUMsRUFBNUMsRUFBZ0Q7TUFDOUNnQyxTQUFTLEdBQUdLLGlCQUFpQixDQUFDSCxHQUFHLENBQUNDLFVBQUosQ0FBZW5DLENBQWYsQ0FBRCxFQUFvQnVCLE9BQXBCLENBQWpCLElBQWlEUyxTQUE3RDtJQUNEO0VBQ0YsQ0FMRDtFQU1BLE9BQU9BLFNBQVA7QUFDRCxDQVREOztBQVVBLE1BQU1LLGlCQUFpQixH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LENBQVA7RUFJRDs7RUFDRCxPQUFPLEVBQVA7QUFDRCxDQVREOztBQVVBLE1BQU1TLFdBQVcsR0FBSW1OLE9BQUQsSUFBYTtFQUMvQixNQUFNeEksR0FBRyxHQUFHLEVBQVo7RUFDQXVJLFlBQVksQ0FBQ0MsT0FBRCxDQUFaLENBQXNCdE0sT0FBdEIsQ0FBK0J0QixDQUFELElBQVFvRixHQUFHLENBQUNwRixDQUFELENBQUgsR0FBUyxJQUEvQztFQUNBLE9BQU9vRixHQUFQO0FBQ0QsQ0FKRDs7QUFLQSxNQUFNNEksTUFBTSxHQUFHLHNCQUFmOztBQUNBLE1BQU1DLE9BQU87RUFBQSx5S0FBRyxXQUFPQyxHQUFQLEVBQVlySyxFQUFaLEVBQWdCc0ssU0FBaEIsRUFBMkJDLFNBQTNCLEVBQXlDO0lBQ3ZELElBQUlGLEdBQUcsSUFBSSxJQUFQLElBQWVBLEdBQUcsQ0FBQyxDQUFELENBQUgsS0FBVyxHQUExQixJQUFpQyxDQUFDRixNQUFNLENBQUNLLElBQVAsQ0FBWUgsR0FBWixDQUF0QyxFQUF3RDtNQUN0RCxNQUFNSSxNQUFNLEdBQUdDLFFBQVEsQ0FBQ2hKLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBZjs7TUFDQSxJQUFJK0ksTUFBSixFQUFZO1FBQ1YsSUFBSXpLLEVBQUUsSUFBSSxJQUFWLEVBQWdCO1VBQ2RBLEVBQUUsQ0FBQzJLLGNBQUg7UUFDRDs7UUFDRCxPQUFPRixNQUFNLENBQUM5RyxJQUFQLENBQVkwRyxHQUFaLEVBQWlCQyxTQUFqQixFQUE0QkMsU0FBNUIsQ0FBUDtNQUNEO0lBQ0Y7O0lBQ0QsT0FBTyxLQUFQO0VBQ0QsQ0FYWTs7RUFBQSxnQkFBUEgsT0FBTztJQUFBO0VBQUE7QUFBQSxHQUFiIiwic291cmNlcyI6WyIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9pb24tc2VsZWN0XzMuZW50cnkuanMiLCIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS90aGVtZS03NjcwMzQxYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBlIGFzIGNyZWF0ZUV2ZW50LCBoLCBIIGFzIEhvc3QsIGkgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtMWE5OWFlYjcuanMnO1xuaW1wb3J0IHsgYiBhcyBnZXRJb25Nb2RlIH0gZnJvbSAnLi9pb25pYy1nbG9iYWwtMDRlMjY4ZTcuanMnO1xuaW1wb3J0IHsgZiBhcyBmb2N1c0VsZW1lbnQsIGsgYXMgZmluZEl0ZW1MYWJlbCwgZCBhcyBnZXRBcmlhTGFiZWwsIGUgYXMgcmVuZGVySGlkZGVuSW5wdXQgfSBmcm9tICcuL2hlbHBlcnMtNGQyNzIzNjAuanMnO1xuaW1wb3J0IHsgYyBhcyBwb3BvdmVyQ29udHJvbGxlciwgYiBhcyBhY3Rpb25TaGVldENvbnRyb2xsZXIsIGEgYXMgYWxlcnRDb250cm9sbGVyLCBzIGFzIHNhZmVDYWxsIH0gZnJvbSAnLi9vdmVybGF5cy1mNDY5ODM0ZC5qcyc7XG5pbXBvcnQgeyBoIGFzIGhvc3RDb250ZXh0LCBnIGFzIGdldENsYXNzTWFwIH0gZnJvbSAnLi90aGVtZS03NjcwMzQxYy5qcyc7XG5pbXBvcnQgJy4vaGFyZHdhcmUtYmFjay1idXR0b24tNDkwZGYxMTUuanMnO1xuXG5jb25zdCB3YXRjaEZvck9wdGlvbnMgPSAoY29udGFpbmVyRWwsIHRhZ05hbWUsIG9uQ2hhbmdlKSA9PiB7XG4gIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbXV0YXRpb24gPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25MaXN0KSA9PiB7XG4gICAgb25DaGFuZ2UoZ2V0U2VsZWN0ZWRPcHRpb24obXV0YXRpb25MaXN0LCB0YWdOYW1lKSk7XG4gIH0pO1xuICBtdXRhdGlvbi5vYnNlcnZlKGNvbnRhaW5lckVsLCB7XG4gICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgIHN1YnRyZWU6IHRydWUsXG4gIH0pO1xuICByZXR1cm4gbXV0YXRpb247XG59O1xuY29uc3QgZ2V0U2VsZWN0ZWRPcHRpb24gPSAobXV0YXRpb25MaXN0LCB0YWdOYW1lKSA9PiB7XG4gIGxldCBuZXdPcHRpb247XG4gIG11dGF0aW9uTGlzdC5mb3JFYWNoKChtdXQpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1mb3Itb2ZcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dC5hZGRlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdPcHRpb24gPSBmaW5kQ2hlY2tlZE9wdGlvbihtdXQuYWRkZWROb2Rlc1tpXSwgdGFnTmFtZSkgfHwgbmV3T3B0aW9uO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdPcHRpb247XG59O1xuY29uc3QgZmluZENoZWNrZWRPcHRpb24gPSAoZWwsIHRhZ05hbWUpID0+IHtcbiAgaWYgKGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBjb25zdCBvcHRpb25zID0gZWwudGFnTmFtZSA9PT0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpID8gW2VsXSA6IEFycmF5LmZyb20oZWwucXVlcnlTZWxlY3RvckFsbCh0YWdOYW1lKSk7XG4gIHJldHVybiBvcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT09IGVsLnZhbHVlKTtcbn07XG5cbmNvbnN0IHNlbGVjdElvc0NzcyA9IFwiOmhvc3R7LS1wbGFjZWhvbGRlci1jb2xvcjpjdXJyZW50Q29sb3I7LS1wbGFjZWhvbGRlci1vcGFjaXR5OjAuMzM7cGFkZGluZy1sZWZ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctcmlnaHQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctdG9wOnZhcigtLXBhZGRpbmctdG9wKTtwYWRkaW5nLWJvdHRvbTp2YXIoLS1wYWRkaW5nLWJvdHRvbSk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtmb250LWZhbWlseTp2YXIoLS1pb24tZm9udC1mYW1pbHksIGluaGVyaXQpO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjJ9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdHtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7LXdlYmtpdC1wYWRkaW5nLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy1pbmxpbmUtZW5kOnZhcigtLXBhZGRpbmctZW5kKX19Omhvc3QoLmluLWl0ZW0pe3Bvc2l0aW9uOnN0YXRpYzttYXgtd2lkdGg6NDUlfTpob3N0KC5zZWxlY3QtZGlzYWJsZWQpe29wYWNpdHk6MC40O3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmlvbi1mb2N1c2VkKSBidXR0b257Ym9yZGVyOjJweCBzb2xpZCAjNWU5ZWQ2fS5zZWxlY3QtcGxhY2Vob2xkZXJ7Y29sb3I6dmFyKC0tcGxhY2Vob2xkZXItY29sb3IpO29wYWNpdHk6dmFyKC0tcGxhY2Vob2xkZXItb3BhY2l0eSl9bGFiZWx7bGVmdDowO3RvcDowO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlcjowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lO291dGxpbmU6bm9uZTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO29wYWNpdHk6MH1bZGlyPXJ0bF0gbGFiZWwsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIGxhYmVse2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6MH1sYWJlbDo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MH1idXR0b257cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTttYXJnaW46MDtwYWRkaW5nOjA7Ym9yZGVyOjA7b3V0bGluZTowO2NsaXA6cmVjdCgwIDAgMCAwKTtvcGFjaXR5OjA7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lfS5zZWxlY3QtaWNvbntwb3NpdGlvbjpyZWxhdGl2ZX0uc2VsZWN0LXRleHR7LW1zLWZsZXg6MTtmbGV4OjE7bWluLXdpZHRoOjE2cHg7Zm9udC1zaXplOmluaGVyaXQ7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVufS5zZWxlY3QtaWNvbi1pbm5lcntsZWZ0OjVweDt0b3A6NTAlO21hcmdpbi10b3A6LTJweDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDowO2hlaWdodDowO2JvcmRlci10b3A6NXB4IHNvbGlkO2JvcmRlci1yaWdodDo1cHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQ6NXB4IHNvbGlkIHRyYW5zcGFyZW50O2NvbG9yOmN1cnJlbnRDb2xvcjtwb2ludGVyLWV2ZW50czpub25lfVtkaXI9cnRsXSAuc2VsZWN0LWljb24taW5uZXIsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIC5zZWxlY3QtaWNvbi1pbm5lcntsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0OjVweH06aG9zdHstLXBhZGRpbmctdG9wOjEwcHg7LS1wYWRkaW5nLWVuZDoxMHB4Oy0tcGFkZGluZy1ib3R0b206MTBweDstLXBhZGRpbmctc3RhcnQ6MjBweH0uc2VsZWN0LWljb257d2lkdGg6MTJweDtoZWlnaHQ6MThweDtvcGFjaXR5OjAuMzN9XCI7XG5cbmNvbnN0IHNlbGVjdE1kQ3NzID0gXCI6aG9zdHstLXBsYWNlaG9sZGVyLWNvbG9yOmN1cnJlbnRDb2xvcjstLXBsYWNlaG9sZGVyLW9wYWNpdHk6MC4zMztwYWRkaW5nLWxlZnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1yaWdodDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2ZvbnQtZmFtaWx5OnZhcigtLWlvbi1mb250LWZhbWlseSwgaW5oZXJpdCk7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6Mn1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0e3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTstd2Via2l0LXBhZGRpbmctZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLWlubGluZS1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpfX06aG9zdCguaW4taXRlbSl7cG9zaXRpb246c3RhdGljO21heC13aWR0aDo0NSV9Omhvc3QoLnNlbGVjdC1kaXNhYmxlZCl7b3BhY2l0eTowLjQ7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguaW9uLWZvY3VzZWQpIGJ1dHRvbntib3JkZXI6MnB4IHNvbGlkICM1ZTllZDZ9LnNlbGVjdC1wbGFjZWhvbGRlcntjb2xvcjp2YXIoLS1wbGFjZWhvbGRlci1jb2xvcik7b3BhY2l0eTp2YXIoLS1wbGFjZWhvbGRlci1vcGFjaXR5KX1sYWJlbHtsZWZ0OjA7dG9wOjA7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjA7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjdXJzb3I6cG9pbnRlcjstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmU7b3V0bGluZTpub25lO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7b3BhY2l0eTowfVtkaXI9cnRsXSBsYWJlbCw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgbGFiZWx7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfWxhYmVsOjotbW96LWZvY3VzLWlubmVye2JvcmRlcjowfWJ1dHRvbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtvdXRsaW5lOjA7Y2xpcDpyZWN0KDAgMCAwIDApO29wYWNpdHk6MDtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmV9LnNlbGVjdC1pY29ue3Bvc2l0aW9uOnJlbGF0aXZlfS5zZWxlY3QtdGV4dHstbXMtZmxleDoxO2ZsZXg6MTttaW4td2lkdGg6MTZweDtmb250LXNpemU6aW5oZXJpdDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW59LnNlbGVjdC1pY29uLWlubmVye2xlZnQ6NXB4O3RvcDo1MCU7bWFyZ2luLXRvcDotMnB4O3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyLXRvcDo1cHggc29saWQ7Ym9yZGVyLXJpZ2h0OjVweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDo1cHggc29saWQgdHJhbnNwYXJlbnQ7Y29sb3I6Y3VycmVudENvbG9yO3BvaW50ZXItZXZlbnRzOm5vbmV9W2Rpcj1ydGxdIC5zZWxlY3QtaWNvbi1pbm5lciw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLnNlbGVjdC1pY29uLWlubmVye2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6NXB4fTpob3N0ey0tcGFkZGluZy10b3A6MTBweDstLXBhZGRpbmctZW5kOjA7LS1wYWRkaW5nLWJvdHRvbToxMHB4Oy0tcGFkZGluZy1zdGFydDoxNnB4fS5zZWxlY3QtaWNvbnt3aWR0aDoxOXB4O2hlaWdodDoxOXB4Oy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAwLjE1cyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4xNXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjE1cyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMTVzIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSksIC13ZWJraXQtdHJhbnNmb3JtIDAuMTVzIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7b3BhY2l0eTowLjU1fTpob3N0LWNvbnRleHQoLml0ZW0tbGFiZWwtc3RhY2tlZCkgLnNlbGVjdC1pY29uLDpob3N0LWNvbnRleHQoLml0ZW0tbGFiZWwtZmxvYXRpbmc6bm90KC5pdGVtLWZpbGwtb3V0bGluZSkpIC5zZWxlY3QtaWNvbiw6aG9zdC1jb250ZXh0KC5pdGVtLWxhYmVsLWZsb2F0aW5nLml0ZW0tZmlsbC1vdXRsaW5lKXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgLTlweCwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgLTlweCwgIDApfTpob3N0LWNvbnRleHQoLml0ZW0taGFzLWZvY3VzKSAuc2VsZWN0LWljb257LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfTpob3N0LWNvbnRleHQoLml0ZW0taGFzLWZvY3VzLml0ZW0tbGFiZWwtc3RhY2tlZCkgLnNlbGVjdC1pY29uLDpob3N0LWNvbnRleHQoLml0ZW0taGFzLWZvY3VzLml0ZW0tbGFiZWwtZmxvYXRpbmc6bm90KC5pdGVtLWZpbGwtb3V0bGluZSkpIC5zZWxlY3QtaWNvbnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgLTlweCwgIDApIHJvdGF0ZSgxODBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgLTlweCwgIDApIHJvdGF0ZSgxODBkZWcpfTpob3N0LWNvbnRleHQoaW9uLWl0ZW0uaW9uLWZvY3VzZWQpIC5zZWxlY3QtaWNvbiw6aG9zdC1jb250ZXh0KC5pdGVtLWhhcy1mb2N1cykgLnNlbGVjdC1pY29ue2NvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvci1mb2N1c2VkKTtvcGFjaXR5OjF9XCI7XG5cbmNvbnN0IFNlbGVjdCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25DaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmlvbkNhbmNlbCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uQ2FuY2VsXCIsIDcpO1xuICAgIHRoaXMuaW9uRGlzbWlzcyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uRGlzbWlzc1wiLCA3KTtcbiAgICB0aGlzLmlvbkZvY3VzID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25Gb2N1c1wiLCA3KTtcbiAgICB0aGlzLmlvbkJsdXIgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkJsdXJcIiwgNyk7XG4gICAgdGhpcy5pb25TdHlsZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uU3R5bGVcIiwgNyk7XG4gICAgdGhpcy5pbnB1dElkID0gYGlvbi1zZWwtJHtzZWxlY3RJZHMrK31gO1xuICAgIHRoaXMuZGlkSW5pdCA9IGZhbHNlO1xuICAgIHRoaXMuaXNFeHBhbmRlZCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggdGhlIHNlbGVjdC5cbiAgICAgKi9cbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBvbiB0aGUgY2FuY2VsIGJ1dHRvbi5cbiAgICAgKi9cbiAgICB0aGlzLmNhbmNlbFRleHQgPSAnQ2FuY2VsJztcbiAgICAvKipcbiAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IG9uIHRoZSBvayBidXR0b24uXG4gICAgICovXG4gICAgdGhpcy5va1RleHQgPSAnT0snO1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBjb250cm9sLCB3aGljaCBpcyBzdWJtaXR0ZWQgd2l0aCB0aGUgZm9ybSBkYXRhLlxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IHRoaXMuaW5wdXRJZDtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3QgY2FuIGFjY2VwdCBtdWx0aXBsZSB2YWx1ZXMuXG4gICAgICovXG4gICAgdGhpcy5tdWx0aXBsZSA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlcmZhY2UgdGhlIHNlbGVjdCBzaG91bGQgdXNlOiBgYWN0aW9uLXNoZWV0YCwgYHBvcG92ZXJgIG9yIGBhbGVydGAuXG4gICAgICovXG4gICAgdGhpcy5pbnRlcmZhY2UgPSAnYWxlcnQnO1xuICAgIC8qKlxuICAgICAqIEFueSBhZGRpdGlvbmFsIG9wdGlvbnMgdGhhdCB0aGUgYGFsZXJ0YCwgYGFjdGlvbi1zaGVldGAgb3IgYHBvcG92ZXJgIGludGVyZmFjZVxuICAgICAqIGNhbiB0YWtlLiBTZWUgdGhlIFtpb24tYWxlcnQgZG9jc10oLi9hbGVydCksIHRoZVxuICAgICAqIFtpb24tYWN0aW9uLXNoZWV0IGRvY3NdKC4vYWN0aW9uLXNoZWV0KSBhbmQgdGhlXG4gICAgICogW2lvbi1wb3BvdmVyIGRvY3NdKC4vcG9wb3ZlcikgZm9yIHRoZVxuICAgICAqIGNyZWF0ZSBvcHRpb25zIGZvciBlYWNoIGludGVyZmFjZS5cbiAgICAgKlxuICAgICAqIE5vdGU6IGBpbnRlcmZhY2VPcHRpb25zYCB3aWxsIG5vdCBvdmVycmlkZSBgaW5wdXRzYCBvciBgYnV0dG9uc2Agd2l0aCB0aGUgYGFsZXJ0YCBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgdGhpcy5pbnRlcmZhY2VPcHRpb25zID0ge307XG4gICAgdGhpcy5vbkNsaWNrID0gKGV2KSA9PiB7XG4gICAgICB0aGlzLnNldEZvY3VzKCk7XG4gICAgICB0aGlzLm9wZW4oZXYpO1xuICAgIH07XG4gICAgdGhpcy5vbkZvY3VzID0gKCkgPT4ge1xuICAgICAgdGhpcy5pb25Gb2N1cy5lbWl0KCk7XG4gICAgfTtcbiAgICB0aGlzLm9uQmx1ciA9ICgpID0+IHtcbiAgICAgIHRoaXMuaW9uQmx1ci5lbWl0KCk7XG4gICAgfTtcbiAgfVxuICBzdHlsZUNoYW5nZWQoKSB7XG4gICAgdGhpcy5lbWl0U3R5bGUoKTtcbiAgfVxuICB2YWx1ZUNoYW5nZWQoKSB7XG4gICAgdGhpcy5lbWl0U3R5bGUoKTtcbiAgICAvLyBUT0RPOiBGVy0xMTYwIC0gUmVtb3ZlIHRoZSBgZGlkSW5pdGAgcHJvcGVydHkgd2hlbiBpb25DaGFuZ2UgYmVoYXZpb3IgaXMgY2hhbmdlZCBpbiB2Ny5cbiAgICBpZiAodGhpcy5kaWRJbml0KSB7XG4gICAgICB0aGlzLmlvbkNoYW5nZS5lbWl0KHtcbiAgICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy51cGRhdGVPdmVybGF5T3B0aW9ucygpO1xuICAgIHRoaXMuZW1pdFN0eWxlKCk7XG4gICAgdGhpcy5tdXRhdGlvbk8gPSB3YXRjaEZvck9wdGlvbnModGhpcy5lbCwgJ2lvbi1zZWxlY3Qtb3B0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVPdmVybGF5T3B0aW9ucygpO1xuICAgIH0pO1xuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm11dGF0aW9uTykge1xuICAgICAgdGhpcy5tdXRhdGlvbk8uZGlzY29ubmVjdCgpO1xuICAgICAgdGhpcy5tdXRhdGlvbk8gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgdGhpcy5kaWRJbml0ID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogT3BlbiB0aGUgc2VsZWN0IG92ZXJsYXkuIFRoZSBvdmVybGF5IGlzIGVpdGhlciBhbiBhbGVydCwgYWN0aW9uIHNoZWV0LCBvciBwb3BvdmVyLFxuICAgKiBkZXBlbmRpbmcgb24gdGhlIGBpbnRlcmZhY2VgIHByb3BlcnR5IG9uIHRoZSBgaW9uLXNlbGVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCBUaGUgdXNlciBpbnRlcmZhY2UgZXZlbnQgdGhhdCBjYWxsZWQgdGhlIG9wZW4uXG4gICAqL1xuICBhc3luYyBvcGVuKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5pc0V4cGFuZGVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLmlzRXhwYW5kZWQgPSB0cnVlO1xuICAgIGNvbnN0IG92ZXJsYXkgPSAodGhpcy5vdmVybGF5ID0gYXdhaXQgdGhpcy5jcmVhdGVPdmVybGF5KGV2ZW50KSk7XG4gICAgb3ZlcmxheS5vbkRpZERpc21pc3MoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMub3ZlcmxheSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pb25EaXNtaXNzLmVtaXQoKTtcbiAgICAgIHRoaXMuc2V0Rm9jdXMoKTtcbiAgICB9KTtcbiAgICBhd2FpdCBvdmVybGF5LnByZXNlbnQoKTtcbiAgICAvLyBmb2N1cyBzZWxlY3RlZCBvcHRpb24gZm9yIHBvcG92ZXJzXG4gICAgaWYgKHRoaXMuaW50ZXJmYWNlID09PSAncG9wb3ZlcicpIHtcbiAgICAgIGxldCBpbmRleE9mU2VsZWN0ZWQgPSB0aGlzLmNoaWxkT3B0cy5tYXAoKG8pID0+IG8udmFsdWUpLmluZGV4T2YodGhpcy52YWx1ZSk7XG4gICAgICBpbmRleE9mU2VsZWN0ZWQgPSBpbmRleE9mU2VsZWN0ZWQgPiAtMSA/IGluZGV4T2ZTZWxlY3RlZCA6IDA7IC8vIGRlZmF1bHQgdG8gZmlyc3Qgb3B0aW9uIGlmIG5vdGhpbmcgc2VsZWN0ZWRcbiAgICAgIGNvbnN0IHNlbGVjdGVkRWwgPSBvdmVybGF5LnF1ZXJ5U2VsZWN0b3IoYC5zZWxlY3QtaW50ZXJmYWNlLW9wdGlvbjpudGgtY2hpbGQoJHtpbmRleE9mU2VsZWN0ZWQgKyAxfSlgKTtcbiAgICAgIGlmIChzZWxlY3RlZEVsKSB7XG4gICAgICAgIGZvY3VzRWxlbWVudChzZWxlY3RlZEVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG92ZXJsYXk7XG4gIH1cbiAgY3JlYXRlT3ZlcmxheShldikge1xuICAgIGxldCBzZWxlY3RJbnRlcmZhY2UgPSB0aGlzLmludGVyZmFjZTtcbiAgICBpZiAoc2VsZWN0SW50ZXJmYWNlID09PSAnYWN0aW9uLXNoZWV0JyAmJiB0aGlzLm11bHRpcGxlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFNlbGVjdCBpbnRlcmZhY2UgY2Fubm90IGJlIFwiJHtzZWxlY3RJbnRlcmZhY2V9XCIgd2l0aCBhIG11bHRpLXZhbHVlIHNlbGVjdC4gVXNpbmcgdGhlIFwiYWxlcnRcIiBpbnRlcmZhY2UgaW5zdGVhZC5gKTtcbiAgICAgIHNlbGVjdEludGVyZmFjZSA9ICdhbGVydCc7XG4gICAgfVxuICAgIGlmIChzZWxlY3RJbnRlcmZhY2UgPT09ICdwb3BvdmVyJyAmJiAhZXYpIHtcbiAgICAgIGNvbnNvbGUud2FybihgU2VsZWN0IGludGVyZmFjZSBjYW5ub3QgYmUgYSBcIiR7c2VsZWN0SW50ZXJmYWNlfVwiIHdpdGhvdXQgcGFzc2luZyBhbiBldmVudC4gVXNpbmcgdGhlIFwiYWxlcnRcIiBpbnRlcmZhY2UgaW5zdGVhZC5gKTtcbiAgICAgIHNlbGVjdEludGVyZmFjZSA9ICdhbGVydCc7XG4gICAgfVxuICAgIGlmIChzZWxlY3RJbnRlcmZhY2UgPT09ICdhY3Rpb24tc2hlZXQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcGVuQWN0aW9uU2hlZXQoKTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdEludGVyZmFjZSA9PT0gJ3BvcG92ZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcGVuUG9wb3Zlcihldik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9wZW5BbGVydCgpO1xuICB9XG4gIHVwZGF0ZU92ZXJsYXlPcHRpb25zKCkge1xuICAgIGNvbnN0IG92ZXJsYXkgPSB0aGlzLm92ZXJsYXk7XG4gICAgaWYgKCFvdmVybGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoaWxkT3B0cyA9IHRoaXMuY2hpbGRPcHRzO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBzd2l0Y2ggKHRoaXMuaW50ZXJmYWNlKSB7XG4gICAgICBjYXNlICdhY3Rpb24tc2hlZXQnOlxuICAgICAgICBvdmVybGF5LmJ1dHRvbnMgPSB0aGlzLmNyZWF0ZUFjdGlvblNoZWV0QnV0dG9ucyhjaGlsZE9wdHMsIHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwb3BvdmVyJzpcbiAgICAgICAgY29uc3QgcG9wb3ZlciA9IG92ZXJsYXkucXVlcnlTZWxlY3RvcignaW9uLXNlbGVjdC1wb3BvdmVyJyk7XG4gICAgICAgIGlmIChwb3BvdmVyKSB7XG4gICAgICAgICAgcG9wb3Zlci5vcHRpb25zID0gdGhpcy5jcmVhdGVQb3BvdmVyT3B0aW9ucyhjaGlsZE9wdHMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2FsZXJ0JzpcbiAgICAgICAgY29uc3QgaW5wdXRUeXBlID0gdGhpcy5tdWx0aXBsZSA/ICdjaGVja2JveCcgOiAncmFkaW8nO1xuICAgICAgICBvdmVybGF5LmlucHV0cyA9IHRoaXMuY3JlYXRlQWxlcnRJbnB1dHMoY2hpbGRPcHRzLCBpbnB1dFR5cGUsIHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGNyZWF0ZUFjdGlvblNoZWV0QnV0dG9ucyhkYXRhLCBzZWxlY3RWYWx1ZSkge1xuICAgIGNvbnN0IGFjdGlvblNoZWV0QnV0dG9ucyA9IGRhdGEubWFwKChvcHRpb24pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0T3B0aW9uVmFsdWUob3B0aW9uKTtcbiAgICAgIC8vIFJlbW92ZSBoeWRyYXRlZCBiZWZvcmUgY29weWluZyBvdmVyIGNsYXNzZXNcbiAgICAgIGNvbnN0IGNvcHlDbGFzc2VzID0gQXJyYXkuZnJvbShvcHRpb24uY2xhc3NMaXN0KVxuICAgICAgICAuZmlsdGVyKChjbHMpID0+IGNscyAhPT0gJ2h5ZHJhdGVkJylcbiAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgIGNvbnN0IG9wdENsYXNzID0gYCR7T1BUSU9OX0NMQVNTfSAke2NvcHlDbGFzc2VzfWA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByb2xlOiBpc09wdGlvblNlbGVjdGVkKHNlbGVjdFZhbHVlLCB2YWx1ZSwgdGhpcy5jb21wYXJlV2l0aCkgPyAnc2VsZWN0ZWQnIDogJycsXG4gICAgICAgIHRleHQ6IG9wdGlvbi50ZXh0Q29udGVudCxcbiAgICAgICAgY3NzQ2xhc3M6IG9wdENsYXNzLFxuICAgICAgICBoYW5kbGVyOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICAvLyBBZGQgXCJjYW5jZWxcIiBidXR0b25cbiAgICBhY3Rpb25TaGVldEJ1dHRvbnMucHVzaCh7XG4gICAgICB0ZXh0OiB0aGlzLmNhbmNlbFRleHQsXG4gICAgICByb2xlOiAnY2FuY2VsJyxcbiAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgdGhpcy5pb25DYW5jZWwuZW1pdCgpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gYWN0aW9uU2hlZXRCdXR0b25zO1xuICB9XG4gIGNyZWF0ZUFsZXJ0SW5wdXRzKGRhdGEsIGlucHV0VHlwZSwgc2VsZWN0VmFsdWUpIHtcbiAgICBjb25zdCBhbGVydElucHV0cyA9IGRhdGEubWFwKChvcHRpb24pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0T3B0aW9uVmFsdWUob3B0aW9uKTtcbiAgICAgIC8vIFJlbW92ZSBoeWRyYXRlZCBiZWZvcmUgY29weWluZyBvdmVyIGNsYXNzZXNcbiAgICAgIGNvbnN0IGNvcHlDbGFzc2VzID0gQXJyYXkuZnJvbShvcHRpb24uY2xhc3NMaXN0KVxuICAgICAgICAuZmlsdGVyKChjbHMpID0+IGNscyAhPT0gJ2h5ZHJhdGVkJylcbiAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgIGNvbnN0IG9wdENsYXNzID0gYCR7T1BUSU9OX0NMQVNTfSAke2NvcHlDbGFzc2VzfWA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnB1dFR5cGUsXG4gICAgICAgIGNzc0NsYXNzOiBvcHRDbGFzcyxcbiAgICAgICAgbGFiZWw6IG9wdGlvbi50ZXh0Q29udGVudCB8fCAnJyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGNoZWNrZWQ6IGlzT3B0aW9uU2VsZWN0ZWQoc2VsZWN0VmFsdWUsIHZhbHVlLCB0aGlzLmNvbXBhcmVXaXRoKSxcbiAgICAgICAgZGlzYWJsZWQ6IG9wdGlvbi5kaXNhYmxlZCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGFsZXJ0SW5wdXRzO1xuICB9XG4gIGNyZWF0ZVBvcG92ZXJPcHRpb25zKGRhdGEsIHNlbGVjdFZhbHVlKSB7XG4gICAgY29uc3QgcG9wb3Zlck9wdGlvbnMgPSBkYXRhLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdldE9wdGlvblZhbHVlKG9wdGlvbik7XG4gICAgICAvLyBSZW1vdmUgaHlkcmF0ZWQgYmVmb3JlIGNvcHlpbmcgb3ZlciBjbGFzc2VzXG4gICAgICBjb25zdCBjb3B5Q2xhc3NlcyA9IEFycmF5LmZyb20ob3B0aW9uLmNsYXNzTGlzdClcbiAgICAgICAgLmZpbHRlcigoY2xzKSA9PiBjbHMgIT09ICdoeWRyYXRlZCcpXG4gICAgICAgIC5qb2luKCcgJyk7XG4gICAgICBjb25zdCBvcHRDbGFzcyA9IGAke09QVElPTl9DTEFTU30gJHtjb3B5Q2xhc3Nlc31gO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dDogb3B0aW9uLnRleHRDb250ZW50IHx8ICcnLFxuICAgICAgICBjc3NDbGFzczogb3B0Q2xhc3MsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjaGVja2VkOiBpc09wdGlvblNlbGVjdGVkKHNlbGVjdFZhbHVlLCB2YWx1ZSwgdGhpcy5jb21wYXJlV2l0aCksXG4gICAgICAgIGRpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQsXG4gICAgICAgIGhhbmRsZXI6IChzZWxlY3RlZCkgPT4ge1xuICAgICAgICAgIHRoaXMudmFsdWUgPSBzZWxlY3RlZDtcbiAgICAgICAgICBpZiAoIXRoaXMubXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBwb3BvdmVyT3B0aW9ucztcbiAgfVxuICBhc3luYyBvcGVuUG9wb3Zlcihldikge1xuICAgIGNvbnN0IGludGVyZmFjZU9wdGlvbnMgPSB0aGlzLmludGVyZmFjZU9wdGlvbnM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3Qgc2hvd0JhY2tkcm9wID0gbW9kZSA9PT0gJ21kJyA/IGZhbHNlIDogdHJ1ZTtcbiAgICBjb25zdCBtdWx0aXBsZSA9IHRoaXMubXVsdGlwbGU7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgIGxldCBldmVudCA9IGV2O1xuICAgIGxldCBzaXplID0gJ2F1dG8nO1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmVsLmNsb3Nlc3QoJ2lvbi1pdGVtJyk7XG4gICAgLy8gSWYgdGhlIHNlbGVjdCBpcyBpbnNpZGUgb2YgYW4gaXRlbSBjb250YWluaW5nIGEgZmxvYXRpbmdcbiAgICAvLyBvciBzdGFja2VkIGxhYmVsIHRoZW4gdGhlIHBvcG92ZXIgc2hvdWxkIHRha2UgdXAgdGhlXG4gICAgLy8gZnVsbCB3aWR0aCBvZiB0aGUgaXRlbSB3aGVuIGl0IHByZXNlbnRzXG4gICAgaWYgKGl0ZW0gJiYgKGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdpdGVtLWxhYmVsLWZsb2F0aW5nJykgfHwgaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2l0ZW0tbGFiZWwtc3RhY2tlZCcpKSkge1xuICAgICAgZXZlbnQgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV2KSwgeyBkZXRhaWw6IHtcbiAgICAgICAgICBpb25TaGFkb3dUYXJnZXQ6IGl0ZW0sXG4gICAgICAgIH0gfSk7XG4gICAgICBzaXplID0gJ2NvdmVyJztcbiAgICB9XG4gICAgY29uc3QgcG9wb3Zlck9wdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtb2RlLFxuICAgICAgZXZlbnQsIGFsaWdubWVudDogJ2NlbnRlcicsIHNpemUsXG4gICAgICBzaG93QmFja2Ryb3AgfSwgaW50ZXJmYWNlT3B0aW9ucyksIHsgY29tcG9uZW50OiAnaW9uLXNlbGVjdC1wb3BvdmVyJywgY3NzQ2xhc3M6IFsnc2VsZWN0LXBvcG92ZXInLCBpbnRlcmZhY2VPcHRpb25zLmNzc0NsYXNzXSwgY29tcG9uZW50UHJvcHM6IHtcbiAgICAgICAgaGVhZGVyOiBpbnRlcmZhY2VPcHRpb25zLmhlYWRlcixcbiAgICAgICAgc3ViSGVhZGVyOiBpbnRlcmZhY2VPcHRpb25zLnN1YkhlYWRlcixcbiAgICAgICAgbWVzc2FnZTogaW50ZXJmYWNlT3B0aW9ucy5tZXNzYWdlLFxuICAgICAgICBtdWx0aXBsZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIG9wdGlvbnM6IHRoaXMuY3JlYXRlUG9wb3Zlck9wdGlvbnModGhpcy5jaGlsZE9wdHMsIHZhbHVlKSxcbiAgICAgIH0gfSk7XG4gICAgcmV0dXJuIHBvcG92ZXJDb250cm9sbGVyLmNyZWF0ZShwb3BvdmVyT3B0cyk7XG4gIH1cbiAgYXN5bmMgb3BlbkFjdGlvblNoZWV0KCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IGludGVyZmFjZU9wdGlvbnMgPSB0aGlzLmludGVyZmFjZU9wdGlvbnM7XG4gICAgY29uc3QgYWN0aW9uU2hlZXRPcHRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbW9kZSB9LCBpbnRlcmZhY2VPcHRpb25zKSwgeyBidXR0b25zOiB0aGlzLmNyZWF0ZUFjdGlvblNoZWV0QnV0dG9ucyh0aGlzLmNoaWxkT3B0cywgdGhpcy52YWx1ZSksIGNzc0NsYXNzOiBbJ3NlbGVjdC1hY3Rpb24tc2hlZXQnLCBpbnRlcmZhY2VPcHRpb25zLmNzc0NsYXNzXSB9KTtcbiAgICByZXR1cm4gYWN0aW9uU2hlZXRDb250cm9sbGVyLmNyZWF0ZShhY3Rpb25TaGVldE9wdHMpO1xuICB9XG4gIGFzeW5jIG9wZW5BbGVydCgpIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2V0TGFiZWwoKTtcbiAgICBjb25zdCBsYWJlbFRleHQgPSBsYWJlbCA/IGxhYmVsLnRleHRDb250ZW50IDogbnVsbDtcbiAgICBjb25zdCBpbnRlcmZhY2VPcHRpb25zID0gdGhpcy5pbnRlcmZhY2VPcHRpb25zO1xuICAgIGNvbnN0IGlucHV0VHlwZSA9IHRoaXMubXVsdGlwbGUgPyAnY2hlY2tib3gnIDogJ3JhZGlvJztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCBhbGVydE9wdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtb2RlIH0sIGludGVyZmFjZU9wdGlvbnMpLCB7IGhlYWRlcjogaW50ZXJmYWNlT3B0aW9ucy5oZWFkZXIgPyBpbnRlcmZhY2VPcHRpb25zLmhlYWRlciA6IGxhYmVsVGV4dCwgaW5wdXRzOiB0aGlzLmNyZWF0ZUFsZXJ0SW5wdXRzKHRoaXMuY2hpbGRPcHRzLCBpbnB1dFR5cGUsIHRoaXMudmFsdWUpLCBidXR0b25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0OiB0aGlzLmNhbmNlbFRleHQsXG4gICAgICAgICAgcm9sZTogJ2NhbmNlbCcsXG4gICAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pb25DYW5jZWwuZW1pdCgpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0ZXh0OiB0aGlzLm9rVGV4dCxcbiAgICAgICAgICBoYW5kbGVyOiAoc2VsZWN0ZWRWYWx1ZXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBzZWxlY3RlZFZhbHVlcztcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSwgY3NzQ2xhc3M6IFtcbiAgICAgICAgJ3NlbGVjdC1hbGVydCcsXG4gICAgICAgIGludGVyZmFjZU9wdGlvbnMuY3NzQ2xhc3MsXG4gICAgICAgIHRoaXMubXVsdGlwbGUgPyAnbXVsdGlwbGUtc2VsZWN0LWFsZXJ0JyA6ICdzaW5nbGUtc2VsZWN0LWFsZXJ0JyxcbiAgICAgIF0gfSk7XG4gICAgcmV0dXJuIGFsZXJ0Q29udHJvbGxlci5jcmVhdGUoYWxlcnRPcHRzKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgdGhlIHNlbGVjdCBpbnRlcmZhY2UuXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICAvLyBUT0RPIGNoZWNrICF0aGlzLm92ZXJsYXkgfHwgIXRoaXMuaXNGb2N1cygpXG4gICAgaWYgKCF0aGlzLm92ZXJsYXkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vdmVybGF5LmRpc21pc3MoKTtcbiAgfVxuICBnZXRMYWJlbCgpIHtcbiAgICByZXR1cm4gZmluZEl0ZW1MYWJlbCh0aGlzLmVsKTtcbiAgfVxuICBoYXNWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0KCkgIT09ICcnO1xuICB9XG4gIGdldCBjaGlsZE9wdHMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdpb24tc2VsZWN0LW9wdGlvbicpKTtcbiAgfVxuICBnZXRUZXh0KCkge1xuICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IHRoaXMuc2VsZWN0ZWRUZXh0O1xuICAgIGlmIChzZWxlY3RlZFRleHQgIT0gbnVsbCAmJiBzZWxlY3RlZFRleHQgIT09ICcnKSB7XG4gICAgICByZXR1cm4gc2VsZWN0ZWRUZXh0O1xuICAgIH1cbiAgICByZXR1cm4gZ2VuZXJhdGVUZXh0KHRoaXMuY2hpbGRPcHRzLCB0aGlzLnZhbHVlLCB0aGlzLmNvbXBhcmVXaXRoKTtcbiAgfVxuICBzZXRGb2N1cygpIHtcbiAgICBpZiAodGhpcy5mb2N1c0VsKSB7XG4gICAgICB0aGlzLmZvY3VzRWwuZm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgZW1pdFN0eWxlKCkge1xuICAgIHRoaXMuaW9uU3R5bGUuZW1pdCh7XG4gICAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICAgICdpbnRlcmFjdGl2ZS1kaXNhYmxlZCc6IHRoaXMuZGlzYWJsZWQsXG4gICAgICBzZWxlY3Q6IHRydWUsXG4gICAgICAnc2VsZWN0LWRpc2FibGVkJzogdGhpcy5kaXNhYmxlZCxcbiAgICAgICdoYXMtcGxhY2Vob2xkZXInOiB0aGlzLnBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAnaGFzLXZhbHVlJzogdGhpcy5oYXNWYWx1ZSgpLFxuICAgICAgJ2hhcy1mb2N1cyc6IHRoaXMuaXNFeHBhbmRlZCxcbiAgICB9KTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkaXNhYmxlZCwgZWwsIGlucHV0SWQsIGlzRXhwYW5kZWQsIG5hbWUsIHBsYWNlaG9sZGVyLCB2YWx1ZSB9ID0gdGhpcztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCB7IGxhYmVsVGV4dCwgbGFiZWxJZCB9ID0gZ2V0QXJpYUxhYmVsKGVsLCBpbnB1dElkKTtcbiAgICByZW5kZXJIaWRkZW5JbnB1dCh0cnVlLCBlbCwgbmFtZSwgcGFyc2VWYWx1ZSh2YWx1ZSksIGRpc2FibGVkKTtcbiAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSB0aGlzLmdldFRleHQoKTtcbiAgICBsZXQgYWRkUGxhY2Vob2xkZXJDbGFzcyA9IGZhbHNlO1xuICAgIGxldCBzZWxlY3RUZXh0ID0gZGlzcGxheVZhbHVlO1xuICAgIGlmIChzZWxlY3RUZXh0ID09PSAnJyAmJiBwbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWxlY3RUZXh0ID0gcGxhY2Vob2xkZXI7XG4gICAgICBhZGRQbGFjZWhvbGRlckNsYXNzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0VGV4dENsYXNzZXMgPSB7XG4gICAgICAnc2VsZWN0LXRleHQnOiB0cnVlLFxuICAgICAgJ3NlbGVjdC1wbGFjZWhvbGRlcic6IGFkZFBsYWNlaG9sZGVyQ2xhc3MsXG4gICAgfTtcbiAgICBjb25zdCB0ZXh0UGFydCA9IGFkZFBsYWNlaG9sZGVyQ2xhc3MgPyAncGxhY2Vob2xkZXInIDogJ3RleHQnO1xuICAgIC8vIElmIHRoZXJlIGlzIGEgbGFiZWwgdGhlbiB3ZSBuZWVkIHRvIGNvbmNhdGVuYXRlIGl0IHdpdGggdGhlXG4gICAgLy8gY3VycmVudCB2YWx1ZSAob3IgcGxhY2Vob2xkZXIpIGFuZCBhIGNvbW1hIHNvIGl0IHNlcGFyYXRlc1xuICAgIC8vIG5pY2VseSB3aGVuIHRoZSBzY3JlZW4gcmVhZGVyIGFubm91bmNlcyBpdCwgb3RoZXJ3aXNlIGp1c3RcbiAgICAvLyBhbm5vdW5jZSB0aGUgdmFsdWUgLyBwbGFjZWhvbGRlclxuICAgIGNvbnN0IGRpc3BsYXlMYWJlbCA9IGxhYmVsVGV4dCAhPT0gdW5kZWZpbmVkID8gKHNlbGVjdFRleHQgIT09ICcnID8gYCR7c2VsZWN0VGV4dH0sICR7bGFiZWxUZXh0fWAgOiBsYWJlbFRleHQpIDogc2VsZWN0VGV4dDtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBvbkNsaWNrOiB0aGlzLm9uQ2xpY2ssIHJvbGU6IFwiYnV0dG9uXCIsIFwiYXJpYS1oYXNwb3B1cFwiOiBcImxpc3Rib3hcIiwgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVkID8gJ3RydWUnIDogbnVsbCwgXCJhcmlhLWxhYmVsXCI6IGRpc3BsYXlMYWJlbCwgY2xhc3M6IHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAnaW4taXRlbSc6IGhvc3RDb250ZXh0KCdpb24taXRlbScsIGVsKSxcbiAgICAgICAgJ3NlbGVjdC1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAnc2VsZWN0LWV4cGFuZGVkJzogaXNFeHBhbmRlZCxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBzZWxlY3RUZXh0Q2xhc3NlcywgcGFydDogdGV4dFBhcnQgfSwgc2VsZWN0VGV4dCksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJzZWxlY3QtaWNvblwiLCByb2xlOiBcInByZXNlbnRhdGlvblwiLCBwYXJ0OiBcImljb25cIiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwic2VsZWN0LWljb24taW5uZXJcIiB9KSksIGgoXCJsYWJlbFwiLCB7IGlkOiBsYWJlbElkIH0sIGRpc3BsYXlMYWJlbCksIGgoXCJidXR0b25cIiwgeyB0eXBlOiBcImJ1dHRvblwiLCBkaXNhYmxlZDogZGlzYWJsZWQsIGlkOiBpbnB1dElkLCBcImFyaWEtbGFiZWxsZWRieVwiOiBsYWJlbElkLCBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsIFwiYXJpYS1leHBhbmRlZFwiOiBgJHtpc0V4cGFuZGVkfWAsIG9uRm9jdXM6IHRoaXMub25Gb2N1cywgb25CbHVyOiB0aGlzLm9uQmx1ciwgcmVmOiAoZm9jdXNFbCkgPT4gKHRoaXMuZm9jdXNFbCA9IGZvY3VzRWwpIH0pKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwiZGlzYWJsZWRcIjogW1wic3R5bGVDaGFuZ2VkXCJdLFxuICAgIFwicGxhY2Vob2xkZXJcIjogW1wic3R5bGVDaGFuZ2VkXCJdLFxuICAgIFwiaXNFeHBhbmRlZFwiOiBbXCJzdHlsZUNoYW5nZWRcIl0sXG4gICAgXCJ2YWx1ZVwiOiBbXCJ2YWx1ZUNoYW5nZWRcIl1cbiAgfTsgfVxufTtcbmNvbnN0IGlzT3B0aW9uU2VsZWN0ZWQgPSAoY3VycmVudFZhbHVlLCBjb21wYXJlVmFsdWUsIGNvbXBhcmVXaXRoKSA9PiB7XG4gIGlmIChjdXJyZW50VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50VmFsdWUpKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRWYWx1ZS5zb21lKCh2YWwpID0+IGNvbXBhcmVPcHRpb25zKHZhbCwgY29tcGFyZVZhbHVlLCBjb21wYXJlV2l0aCkpO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBjb21wYXJlT3B0aW9ucyhjdXJyZW50VmFsdWUsIGNvbXBhcmVWYWx1ZSwgY29tcGFyZVdpdGgpO1xuICB9XG59O1xuY29uc3QgZ2V0T3B0aW9uVmFsdWUgPSAoZWwpID0+IHtcbiAgY29uc3QgdmFsdWUgPSBlbC52YWx1ZTtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyBlbC50ZXh0Q29udGVudCB8fCAnJyA6IHZhbHVlO1xufTtcbmNvbnN0IHBhcnNlVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZS5qb2luKCcsJyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG59O1xuY29uc3QgY29tcGFyZU9wdGlvbnMgPSAoY3VycmVudFZhbHVlLCBjb21wYXJlVmFsdWUsIGNvbXBhcmVXaXRoKSA9PiB7XG4gIGlmICh0eXBlb2YgY29tcGFyZVdpdGggPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29tcGFyZVdpdGgoY3VycmVudFZhbHVlLCBjb21wYXJlVmFsdWUpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBjb21wYXJlV2l0aCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gY3VycmVudFZhbHVlW2NvbXBhcmVXaXRoXSA9PT0gY29tcGFyZVZhbHVlW2NvbXBhcmVXaXRoXTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjb21wYXJlVmFsdWUpID8gY29tcGFyZVZhbHVlLmluY2x1ZGVzKGN1cnJlbnRWYWx1ZSkgOiBjdXJyZW50VmFsdWUgPT09IGNvbXBhcmVWYWx1ZTtcbiAgfVxufTtcbmNvbnN0IGdlbmVyYXRlVGV4dCA9IChvcHRzLCB2YWx1ZSwgY29tcGFyZVdpdGgpID0+IHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gICAgICAubWFwKCh2KSA9PiB0ZXh0Rm9yVmFsdWUob3B0cywgdiwgY29tcGFyZVdpdGgpKVxuICAgICAgLmZpbHRlcigob3B0KSA9PiBvcHQgIT09IG51bGwpXG4gICAgICAuam9pbignLCAnKTtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gdGV4dEZvclZhbHVlKG9wdHMsIHZhbHVlLCBjb21wYXJlV2l0aCkgfHwgJyc7XG4gIH1cbn07XG5jb25zdCB0ZXh0Rm9yVmFsdWUgPSAob3B0cywgdmFsdWUsIGNvbXBhcmVXaXRoKSA9PiB7XG4gIGNvbnN0IHNlbGVjdE9wdCA9IG9wdHMuZmluZCgob3B0KSA9PiB7XG4gICAgcmV0dXJuIGNvbXBhcmVPcHRpb25zKHZhbHVlLCBnZXRPcHRpb25WYWx1ZShvcHQpLCBjb21wYXJlV2l0aCk7XG4gIH0pO1xuICByZXR1cm4gc2VsZWN0T3B0ID8gc2VsZWN0T3B0LnRleHRDb250ZW50IDogbnVsbDtcbn07XG5sZXQgc2VsZWN0SWRzID0gMDtcbmNvbnN0IE9QVElPTl9DTEFTUyA9ICdzZWxlY3QtaW50ZXJmYWNlLW9wdGlvbic7XG5TZWxlY3Quc3R5bGUgPSB7XG4gIGlvczogc2VsZWN0SW9zQ3NzLFxuICBtZDogc2VsZWN0TWRDc3Ncbn07XG5cbmNvbnN0IHNlbGVjdE9wdGlvbkNzcyA9IFwiOmhvc3R7ZGlzcGxheTpub25lfVwiO1xuXG5jb25zdCBTZWxlY3RPcHRpb24gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW5wdXRJZCA9IGBpb24tc2Vsb3B0LSR7c2VsZWN0T3B0aW9uSWRzKyt9YDtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSB1c2VyIGNhbm5vdCBpbnRlcmFjdCB3aXRoIHRoZSBzZWxlY3Qgb3B0aW9uLiBUaGlzIHByb3BlcnR5IGRvZXMgbm90IGFwcGx5IHdoZW4gYGludGVyZmFjZT1cImFjdGlvbi1zaGVldFwiYCBhcyBgaW9uLWFjdGlvbi1zaGVldGAgZG9lcyBub3QgYWxsb3cgZm9yIGRpc2FibGVkIGJ1dHRvbnMuXG4gICAgICovXG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaChIb3N0LCB7IHJvbGU6IFwib3B0aW9uXCIsIGlkOiB0aGlzLmlucHV0SWQsIGNsYXNzOiBnZXRJb25Nb2RlKHRoaXMpIH0pO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5sZXQgc2VsZWN0T3B0aW9uSWRzID0gMDtcblNlbGVjdE9wdGlvbi5zdHlsZSA9IHNlbGVjdE9wdGlvbkNzcztcblxuY29uc3Qgc2VsZWN0UG9wb3Zlcklvc0NzcyA9IFwiLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1pb3MtaCBpb24tbGlzdC5zYy1pb24tc2VsZWN0LXBvcG92ZXItaW9ze21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH1pb24tbGlzdC1oZWFkZXIuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLWlvcyxpb24tbGFiZWwuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLWlvc3ttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjB9XCI7XG5cbmNvbnN0IHNlbGVjdFBvcG92ZXJNZENzcyA9IFwiLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZC1oIGlvbi1saXN0LnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZHttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjB9aW9uLWxpc3QtaGVhZGVyLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZCxpb24tbGFiZWwuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLW1ke21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH1pb24tbGlzdC5zYy1pb24tc2VsZWN0LXBvcG92ZXItbWQgaW9uLXJhZGlvLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZHtvcGFjaXR5OjB9aW9uLWl0ZW0uc2MtaW9uLXNlbGVjdC1wb3BvdmVyLW1key0taW5uZXItYm9yZGVyLXdpZHRoOjB9Lml0ZW0tcmFkaW8tY2hlY2tlZC5zYy1pb24tc2VsZWN0LXBvcG92ZXItbWR7LS1iYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLWNvbG9yLXByaW1hcnktcmdiLCA1NiwgMTI4LCAyNTUpLCAwLjA4KTstLWJhY2tncm91bmQtZm9jdXNlZDp2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzM4ODBmZik7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTowLjI7LS1iYWNrZ3JvdW5kLWhvdmVyOnZhcigtLWlvbi1jb2xvci1wcmltYXJ5LCAjMzg4MGZmKTstLWJhY2tncm91bmQtaG92ZXItb3BhY2l0eTowLjEyfS5pdGVtLWNoZWNrYm94LWNoZWNrZWQuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLW1key0tYmFja2dyb3VuZC1hY3RpdmF0ZWQ6dmFyKC0taW9uLWl0ZW0tY29sb3IsIHZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKSk7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6dmFyKC0taW9uLWl0ZW0tY29sb3IsIHZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKSk7LS1iYWNrZ3JvdW5kLWhvdmVyOnZhcigtLWlvbi1pdGVtLWNvbG9yLCB2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCkpOy0tY29sb3I6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMzODgwZmYpfVwiO1xuXG5jb25zdCBTZWxlY3RQb3BvdmVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBvcHRpb25zIGZvciB0aGUgcG9wb3ZlclxuICAgICAqL1xuICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICB9XG4gIG9uU2VsZWN0KGV2KSB7XG4gICAgdGhpcy5zZXRDaGVja2VkKGV2KTtcbiAgICB0aGlzLmNhbGxPcHRpb25IYW5kbGVyKGV2KTtcbiAgfVxuICBmaW5kT3B0aW9uRnJvbUV2ZW50KGV2KSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgIHJldHVybiBvcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT09IGV2LnRhcmdldC52YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gYW4gb3B0aW9uIGlzIHNlbGVjdGVkIHdlIG5lZWQgdG8gZ2V0IHRoZSB2YWx1ZShzKVxuICAgKiBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uKHMpIGFuZCByZXR1cm4gaXQgaW4gdGhlIG9wdGlvblxuICAgKiBoYW5kbGVyXG4gICAqL1xuICBjYWxsT3B0aW9uSGFuZGxlcihldikge1xuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuZmluZE9wdGlvbkZyb21FdmVudChldik7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoZXYpO1xuICAgIGlmIChvcHRpb24gPT09IG51bGwgfHwgb3B0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb24uaGFuZGxlcikge1xuICAgICAgc2FmZUNhbGwob3B0aW9uLmhhbmRsZXIsIHZhbHVlcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBUaGlzIGlzIHJlcXVpcmVkIHdoZW4gc2VsZWN0aW5nIGEgcmFkaW8gdGhhdCBpcyBhbHJlYWR5XG4gICAqIHNlbGVjdGVkIGJlY2F1c2UgaXQgd2lsbCBub3QgdHJpZ2dlciB0aGUgaW9uQ2hhbmdlIGV2ZW50XG4gICAqIGJ1dCB3ZSBzdGlsbCB3YW50IHRvIGNsb3NlIHRoZSBwb3BvdmVyXG4gICAqL1xuICByYkNsaWNrKGV2KSB7XG4gICAgdGhpcy5jYWxsT3B0aW9uSGFuZGxlcihldik7XG4gIH1cbiAgc2V0Q2hlY2tlZChldikge1xuICAgIGNvbnN0IHsgbXVsdGlwbGUgfSA9IHRoaXM7XG4gICAgY29uc3Qgb3B0aW9uID0gdGhpcy5maW5kT3B0aW9uRnJvbUV2ZW50KGV2KTtcbiAgICAvLyB0aGlzIGlzIGEgcG9wb3ZlciB3aXRoIGNoZWNrYm94ZXMgKG11bHRpcGxlIHZhbHVlIHNlbGVjdClcbiAgICAvLyB3ZSBuZWVkIHRvIHNldCB0aGUgY2hlY2tlZCB2YWx1ZSBmb3IgdGhpcyBvcHRpb25cbiAgICBpZiAobXVsdGlwbGUgJiYgb3B0aW9uKSB7XG4gICAgICBvcHRpb24uY2hlY2tlZCA9IGV2LmRldGFpbC5jaGVja2VkO1xuICAgIH1cbiAgfVxuICBnZXRWYWx1ZXMoZXYpIHtcbiAgICBjb25zdCB7IG11bHRpcGxlLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgLy8gdGhpcyBpcyBhIHBvcG92ZXIgd2l0aCBjaGVja2JveGVzIChtdWx0aXBsZSB2YWx1ZSBzZWxlY3QpXG4gICAgICAvLyByZXR1cm4gYW4gYXJyYXkgb2YgYWxsIHRoZSBjaGVja2VkIHZhbHVlc1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZmlsdGVyKChvKSA9PiBvLmNoZWNrZWQpLm1hcCgobykgPT4gby52YWx1ZSk7XG4gICAgfVxuICAgIC8vIHRoaXMgaXMgYSBwb3BvdmVyIHdpdGggcmFkaW8gYnV0dG9ucyAoc2luZ2xlIHZhbHVlIHNlbGVjdClcbiAgICAvLyByZXR1cm4gdGhlIHZhbHVlIHRoYXQgd2FzIGNsaWNrZWQsIG90aGVyd2lzZSB1bmRlZmluZWRcbiAgICBjb25zdCBvcHRpb24gPSB0aGlzLmZpbmRPcHRpb25Gcm9tRXZlbnQoZXYpO1xuICAgIHJldHVybiBvcHRpb24gPyBvcHRpb24udmFsdWUgOiB1bmRlZmluZWQ7XG4gIH1cbiAgcmVuZGVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgY29uc3QgeyBtdWx0aXBsZSB9ID0gdGhpcztcbiAgICBzd2l0Y2ggKG11bHRpcGxlKSB7XG4gICAgICBjYXNlIHRydWU6XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckNoZWNrYm94T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJhZGlvT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyQ2hlY2tib3hPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKGgoXCJpb24taXRlbVwiLCB7IGNsYXNzOiBnZXRDbGFzc01hcChvcHRpb24uY3NzQ2xhc3MpIH0sIGgoXCJpb24tY2hlY2tib3hcIiwgeyBzbG90OiBcInN0YXJ0XCIsIHZhbHVlOiBvcHRpb24udmFsdWUsIGRpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQsIGNoZWNrZWQ6IG9wdGlvbi5jaGVja2VkIH0pLCBoKFwiaW9uLWxhYmVsXCIsIG51bGwsIG9wdGlvbi50ZXh0KSkpKTtcbiAgfVxuICByZW5kZXJSYWRpb09wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IGNoZWNrZWQgPSBvcHRpb25zLmZpbHRlcigobykgPT4gby5jaGVja2VkKS5tYXAoKG8pID0+IG8udmFsdWUpWzBdO1xuICAgIHJldHVybiAoaChcImlvbi1yYWRpby1ncm91cFwiLCB7IHZhbHVlOiBjaGVja2VkIH0sIG9wdGlvbnMubWFwKChvcHRpb24pID0+IChoKFwiaW9uLWl0ZW1cIiwgeyBjbGFzczogZ2V0Q2xhc3NNYXAob3B0aW9uLmNzc0NsYXNzKSB9LCBoKFwiaW9uLWxhYmVsXCIsIG51bGwsIG9wdGlvbi50ZXh0KSwgaChcImlvbi1yYWRpb1wiLCB7IHZhbHVlOiBvcHRpb24udmFsdWUsIGRpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQsIG9uQ2xpY2s6IChldikgPT4gdGhpcy5yYkNsaWNrKGV2KSB9KSkpKSkpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhlYWRlciwgbWVzc2FnZSwgb3B0aW9ucywgc3ViSGVhZGVyIH0gPSB0aGlzO1xuICAgIGNvbnN0IGhhc1N1YkhlYWRlck9yTWVzc2FnZSA9IHN1YkhlYWRlciAhPT0gdW5kZWZpbmVkIHx8IG1lc3NhZ2UgIT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBjbGFzczogZ2V0SW9uTW9kZSh0aGlzKSB9LCBoKFwiaW9uLWxpc3RcIiwgbnVsbCwgaGVhZGVyICE9PSB1bmRlZmluZWQgJiYgaChcImlvbi1saXN0LWhlYWRlclwiLCBudWxsLCBoZWFkZXIpLCBoYXNTdWJIZWFkZXJPck1lc3NhZ2UgJiYgKGgoXCJpb24taXRlbVwiLCBudWxsLCBoKFwiaW9uLWxhYmVsXCIsIHsgY2xhc3M6IFwiaW9uLXRleHQtd3JhcFwiIH0sIHN1YkhlYWRlciAhPT0gdW5kZWZpbmVkICYmIGgoXCJoM1wiLCBudWxsLCBzdWJIZWFkZXIpLCBtZXNzYWdlICE9PSB1bmRlZmluZWQgJiYgaChcInBcIiwgbnVsbCwgbWVzc2FnZSkpKSksIHRoaXMucmVuZGVyT3B0aW9ucyhvcHRpb25zKSkpKTtcbiAgfVxufTtcblNlbGVjdFBvcG92ZXIuc3R5bGUgPSB7XG4gIGlvczogc2VsZWN0UG9wb3Zlcklvc0NzcyxcbiAgbWQ6IHNlbGVjdFBvcG92ZXJNZENzc1xufTtcblxuZXhwb3J0IHsgU2VsZWN0IGFzIGlvbl9zZWxlY3QsIFNlbGVjdE9wdGlvbiBhcyBpb25fc2VsZWN0X29wdGlvbiwgU2VsZWN0UG9wb3ZlciBhcyBpb25fc2VsZWN0X3BvcG92ZXIgfTtcbiIsIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5jb25zdCBob3N0Q29udGV4dCA9IChzZWxlY3RvciwgZWwpID0+IHtcbiAgcmV0dXJuIGVsLmNsb3Nlc3Qoc2VsZWN0b3IpICE9PSBudWxsO1xufTtcbi8qKlxuICogQ3JlYXRlIHRoZSBtb2RlIGFuZCBjb2xvciBjbGFzc2VzIGZvciB0aGUgY29tcG9uZW50IGJhc2VkIG9uIHRoZSBjbGFzc2VzIHBhc3NlZCBpblxuICovXG5jb25zdCBjcmVhdGVDb2xvckNsYXNzZXMgPSAoY29sb3IsIGNzc0NsYXNzTWFwKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnICYmIGNvbG9yLmxlbmd0aCA+IDBcbiAgICA/IE9iamVjdC5hc3NpZ24oeyAnaW9uLWNvbG9yJzogdHJ1ZSwgW2Bpb24tY29sb3ItJHtjb2xvcn1gXTogdHJ1ZSB9LCBjc3NDbGFzc01hcCkgOiBjc3NDbGFzc01hcDtcbn07XG5jb25zdCBnZXRDbGFzc0xpc3QgPSAoY2xhc3NlcykgPT4ge1xuICBpZiAoY2xhc3NlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgYXJyYXkgPSBBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4gYXJyYXlcbiAgICAgIC5maWx0ZXIoKGMpID0+IGMgIT0gbnVsbClcbiAgICAgIC5tYXAoKGMpID0+IGMudHJpbSgpKVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPT0gJycpO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5jb25zdCBnZXRDbGFzc01hcCA9IChjbGFzc2VzKSA9PiB7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBnZXRDbGFzc0xpc3QoY2xhc3NlcykuZm9yRWFjaCgoYykgPT4gKG1hcFtjXSA9IHRydWUpKTtcbiAgcmV0dXJuIG1hcDtcbn07XG5jb25zdCBTQ0hFTUUgPSAvXlthLXpdW2EtejAtOStcXC0uXSo6LztcbmNvbnN0IG9wZW5VUkwgPSBhc3luYyAodXJsLCBldiwgZGlyZWN0aW9uLCBhbmltYXRpb24pID0+IHtcbiAgaWYgKHVybCAhPSBudWxsICYmIHVybFswXSAhPT0gJyMnICYmICFTQ0hFTUUudGVzdCh1cmwpKSB7XG4gICAgY29uc3Qgcm91dGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpO1xuICAgIGlmIChyb3V0ZXIpIHtcbiAgICAgIGlmIChldiAhPSBudWxsKSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm91dGVyLnB1c2godXJsLCBkaXJlY3Rpb24sIGFuaW1hdGlvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUNvbG9yQ2xhc3NlcyBhcyBjLCBnZXRDbGFzc01hcCBhcyBnLCBob3N0Q29udGV4dCBhcyBoLCBvcGVuVVJMIGFzIG8gfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVnaXN0ZXJJbnN0YW5jZSIsImUiLCJjcmVhdGVFdmVudCIsImgiLCJIIiwiSG9zdCIsImkiLCJnZXRFbGVtZW50IiwiYiIsImdldElvbk1vZGUiLCJmIiwiZm9jdXNFbGVtZW50IiwiayIsImZpbmRJdGVtTGFiZWwiLCJkIiwiZ2V0QXJpYUxhYmVsIiwicmVuZGVySGlkZGVuSW5wdXQiLCJjIiwicG9wb3ZlckNvbnRyb2xsZXIiLCJhY3Rpb25TaGVldENvbnRyb2xsZXIiLCJhIiwiYWxlcnRDb250cm9sbGVyIiwicyIsInNhZmVDYWxsIiwiaG9zdENvbnRleHQiLCJnIiwiZ2V0Q2xhc3NNYXAiLCJ3YXRjaEZvck9wdGlvbnMiLCJjb250YWluZXJFbCIsInRhZ05hbWUiLCJvbkNoYW5nZSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbiIsIm11dGF0aW9uTGlzdCIsImdldFNlbGVjdGVkT3B0aW9uIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJuZXdPcHRpb24iLCJmb3JFYWNoIiwibXV0IiwiYWRkZWROb2RlcyIsImxlbmd0aCIsImZpbmRDaGVja2VkT3B0aW9uIiwiZWwiLCJub2RlVHlwZSIsInVuZGVmaW5lZCIsIm9wdGlvbnMiLCJ0b1VwcGVyQ2FzZSIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaW5kIiwibyIsInZhbHVlIiwic2VsZWN0SW9zQ3NzIiwic2VsZWN0TWRDc3MiLCJTZWxlY3QiLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJpb25DaGFuZ2UiLCJpb25DYW5jZWwiLCJpb25EaXNtaXNzIiwiaW9uRm9jdXMiLCJpb25CbHVyIiwiaW9uU3R5bGUiLCJpbnB1dElkIiwic2VsZWN0SWRzIiwiZGlkSW5pdCIsImlzRXhwYW5kZWQiLCJkaXNhYmxlZCIsImNhbmNlbFRleHQiLCJva1RleHQiLCJuYW1lIiwibXVsdGlwbGUiLCJpbnRlcmZhY2UiLCJpbnRlcmZhY2VPcHRpb25zIiwib25DbGljayIsImV2Iiwic2V0Rm9jdXMiLCJvcGVuIiwib25Gb2N1cyIsImVtaXQiLCJvbkJsdXIiLCJzdHlsZUNoYW5nZWQiLCJlbWl0U3R5bGUiLCJ2YWx1ZUNoYW5nZWQiLCJjb25uZWN0ZWRDYWxsYmFjayIsInVwZGF0ZU92ZXJsYXlPcHRpb25zIiwibXV0YXRpb25PIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0IiwiY29tcG9uZW50RGlkTG9hZCIsImV2ZW50Iiwib3ZlcmxheSIsImNyZWF0ZU92ZXJsYXkiLCJvbkRpZERpc21pc3MiLCJ0aGVuIiwicHJlc2VudCIsImluZGV4T2ZTZWxlY3RlZCIsImNoaWxkT3B0cyIsIm1hcCIsImluZGV4T2YiLCJzZWxlY3RlZEVsIiwicXVlcnlTZWxlY3RvciIsInNlbGVjdEludGVyZmFjZSIsImNvbnNvbGUiLCJ3YXJuIiwib3BlbkFjdGlvblNoZWV0Iiwib3BlblBvcG92ZXIiLCJvcGVuQWxlcnQiLCJidXR0b25zIiwiY3JlYXRlQWN0aW9uU2hlZXRCdXR0b25zIiwicG9wb3ZlciIsImNyZWF0ZVBvcG92ZXJPcHRpb25zIiwiaW5wdXRUeXBlIiwiaW5wdXRzIiwiY3JlYXRlQWxlcnRJbnB1dHMiLCJkYXRhIiwic2VsZWN0VmFsdWUiLCJhY3Rpb25TaGVldEJ1dHRvbnMiLCJvcHRpb24iLCJnZXRPcHRpb25WYWx1ZSIsImNvcHlDbGFzc2VzIiwiY2xhc3NMaXN0IiwiZmlsdGVyIiwiY2xzIiwiam9pbiIsIm9wdENsYXNzIiwiT1BUSU9OX0NMQVNTIiwicm9sZSIsImlzT3B0aW9uU2VsZWN0ZWQiLCJjb21wYXJlV2l0aCIsInRleHQiLCJ0ZXh0Q29udGVudCIsImNzc0NsYXNzIiwiaGFuZGxlciIsInB1c2giLCJhbGVydElucHV0cyIsInR5cGUiLCJsYWJlbCIsImNoZWNrZWQiLCJwb3BvdmVyT3B0aW9ucyIsInNlbGVjdGVkIiwiY2xvc2UiLCJtb2RlIiwic2hvd0JhY2tkcm9wIiwic2l6ZSIsIml0ZW0iLCJjbG9zZXN0IiwiY29udGFpbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJkZXRhaWwiLCJpb25TaGFkb3dUYXJnZXQiLCJwb3BvdmVyT3B0cyIsImFsaWdubWVudCIsImNvbXBvbmVudCIsImNvbXBvbmVudFByb3BzIiwiaGVhZGVyIiwic3ViSGVhZGVyIiwibWVzc2FnZSIsImNyZWF0ZSIsImFjdGlvblNoZWV0T3B0cyIsImdldExhYmVsIiwibGFiZWxUZXh0IiwiYWxlcnRPcHRzIiwic2VsZWN0ZWRWYWx1ZXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImRpc21pc3MiLCJoYXNWYWx1ZSIsImdldFRleHQiLCJzZWxlY3RlZFRleHQiLCJnZW5lcmF0ZVRleHQiLCJmb2N1c0VsIiwiZm9jdXMiLCJpbnRlcmFjdGl2ZSIsInNlbGVjdCIsInBsYWNlaG9sZGVyIiwicmVuZGVyIiwibGFiZWxJZCIsInBhcnNlVmFsdWUiLCJkaXNwbGF5VmFsdWUiLCJhZGRQbGFjZWhvbGRlckNsYXNzIiwic2VsZWN0VGV4dCIsInNlbGVjdFRleHRDbGFzc2VzIiwidGV4dFBhcnQiLCJkaXNwbGF5TGFiZWwiLCJjbGFzcyIsInBhcnQiLCJpZCIsInJlZiIsIndhdGNoZXJzIiwiY3VycmVudFZhbHVlIiwiY29tcGFyZVZhbHVlIiwiaXNBcnJheSIsInNvbWUiLCJ2YWwiLCJjb21wYXJlT3B0aW9ucyIsInRvU3RyaW5nIiwiaW5jbHVkZXMiLCJvcHRzIiwidiIsInRleHRGb3JWYWx1ZSIsIm9wdCIsInNlbGVjdE9wdCIsInN0eWxlIiwiaW9zIiwibWQiLCJzZWxlY3RPcHRpb25Dc3MiLCJTZWxlY3RPcHRpb24iLCJzZWxlY3RPcHRpb25JZHMiLCJzZWxlY3RQb3BvdmVySW9zQ3NzIiwic2VsZWN0UG9wb3Zlck1kQ3NzIiwiU2VsZWN0UG9wb3ZlciIsIm9uU2VsZWN0Iiwic2V0Q2hlY2tlZCIsImNhbGxPcHRpb25IYW5kbGVyIiwiZmluZE9wdGlvbkZyb21FdmVudCIsInRhcmdldCIsInZhbHVlcyIsImdldFZhbHVlcyIsInJiQ2xpY2siLCJyZW5kZXJPcHRpb25zIiwicmVuZGVyQ2hlY2tib3hPcHRpb25zIiwicmVuZGVyUmFkaW9PcHRpb25zIiwic2xvdCIsImhhc1N1YkhlYWRlck9yTWVzc2FnZSIsImlvbl9zZWxlY3QiLCJpb25fc2VsZWN0X29wdGlvbiIsImlvbl9zZWxlY3RfcG9wb3ZlciIsInNlbGVjdG9yIiwiY3JlYXRlQ29sb3JDbGFzc2VzIiwiY29sb3IiLCJjc3NDbGFzc01hcCIsImdldENsYXNzTGlzdCIsImNsYXNzZXMiLCJhcnJheSIsInNwbGl0IiwidHJpbSIsIlNDSEVNRSIsIm9wZW5VUkwiLCJ1cmwiLCJkaXJlY3Rpb24iLCJhbmltYXRpb24iLCJ0ZXN0Iiwicm91dGVyIiwiZG9jdW1lbnQiLCJwcmV2ZW50RGVmYXVsdCJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8iLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxXX0=