"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-menu_3_entry_js"],{

/***/ 495:
/*!***************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-menu_3.entry.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_menu": () => (/* binding */ Menu),
/* harmony export */   "ion_menu_button": () => (/* binding */ MenuButton),
/* harmony export */   "ion_menu_toggle": () => (/* binding */ MenuToggle)
/* harmony export */ });
/* harmony import */ var C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-1a99aeb7.js */ 4895);
/* harmony import */ var _ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-04e268e7.js */ 2107);
/* harmony import */ var _cubic_bezier_c313947a_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubic-bezier-c313947a.js */ 1077);
/* harmony import */ var _gesture_controller_17e82006_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gesture-controller-17e82006.js */ 607);
/* harmony import */ var _helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers-4d272360.js */ 9158);
/* harmony import */ var _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-e7c8c45c.js */ 8266);
/* harmony import */ var _overlays_f469834d_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./overlays-f469834d.js */ 6938);
/* harmony import */ var _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-40bb69ee.js */ 2002);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./theme-7670341c.js */ 320);
/* harmony import */ var _hardware_back_button_490df115_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hardware-back-button-490df115.js */ 159);
/* harmony import */ var _animation_36c1d77d_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./animation-36c1d77d.js */ 2597);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */











const menuIosCss = ":host{--width:304px;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--background:var(--ion-background-color, #fff);left:0;right:0;top:0;bottom:0;display:none;position:absolute;contain:strict}:host(.show-menu){display:block}.menu-inner{left:0;right:auto;top:0;bottom:0;-webkit-transform:translateX(-9999px);transform:translateX(-9999px);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);contain:strict}[dir=rtl] .menu-inner,:host-context([dir=rtl]) .menu-inner{left:unset;right:unset;left:auto;right:0}:host(.menu-side-start) .menu-inner{--ion-safe-area-right:0px;right:auto;left:0}:host(.menu-side-end) .menu-inner{--ion-safe-area-left:0px;right:0;left:auto;}ion-backdrop{display:none;opacity:0.01;z-index:-1}@media (max-width: 340px){.menu-inner{--width:264px}}:host(.menu-type-reveal){z-index:0}:host(.menu-type-reveal.show-menu) .menu-inner{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}:host(.menu-type-overlay){z-index:1000}:host(.menu-type-overlay) .show-backdrop{display:block;cursor:pointer}:host(.menu-pane-visible){width:var(--width);min-width:var(--min-width);max-width:var(--max-width)}:host(.menu-pane-visible) .menu-inner{left:0;right:0;width:auto;-webkit-transform:none !important;transform:none !important;-webkit-box-shadow:none !important;box-shadow:none !important}:host(.menu-pane-visible) ion-backdrop{display:hidden !important;}:host(.menu-type-push){z-index:1000}:host(.menu-type-push) .show-backdrop{display:block}";
const menuMdCss = ":host{--width:304px;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--background:var(--ion-background-color, #fff);left:0;right:0;top:0;bottom:0;display:none;position:absolute;contain:strict}:host(.show-menu){display:block}.menu-inner{left:0;right:auto;top:0;bottom:0;-webkit-transform:translateX(-9999px);transform:translateX(-9999px);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);contain:strict}[dir=rtl] .menu-inner,:host-context([dir=rtl]) .menu-inner{left:unset;right:unset;left:auto;right:0}:host(.menu-side-start) .menu-inner{--ion-safe-area-right:0px;right:auto;left:0}:host(.menu-side-end) .menu-inner{--ion-safe-area-left:0px;right:0;left:auto;}ion-backdrop{display:none;opacity:0.01;z-index:-1}@media (max-width: 340px){.menu-inner{--width:264px}}:host(.menu-type-reveal){z-index:0}:host(.menu-type-reveal.show-menu) .menu-inner{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}:host(.menu-type-overlay){z-index:1000}:host(.menu-type-overlay) .show-backdrop{display:block;cursor:pointer}:host(.menu-pane-visible){width:var(--width);min-width:var(--min-width);max-width:var(--max-width)}:host(.menu-pane-visible) .menu-inner{left:0;right:0;width:auto;-webkit-transform:none !important;transform:none !important;-webkit-box-shadow:none !important;box-shadow:none !important}:host(.menu-pane-visible) ion-backdrop{display:hidden !important;}:host(.menu-type-overlay) .menu-inner{-webkit-box-shadow:4px 0px 16px rgba(0, 0, 0, 0.18);box-shadow:4px 0px 16px rgba(0, 0, 0, 0.18)}";
const iosEasing = 'cubic-bezier(0.32,0.72,0,1)';
const mdEasing = 'cubic-bezier(0.0,0.0,0.2,1)';
const iosEasingReverse = 'cubic-bezier(1, 0, 0.68, 0.28)';
const mdEasingReverse = 'cubic-bezier(0.4, 0, 0.6, 1)';
const focusableQueryString = '[tabindex]:not([tabindex^="-"]), input:not([type=hidden]):not([tabindex^="-"]), textarea:not([tabindex^="-"]), button:not([tabindex^="-"]), select:not([tabindex^="-"]), .ion-focusable:not([tabindex^="-"])';
const Menu = class {
  constructor(hostRef) {
    (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionWillOpen = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionWillOpen", 7);
    this.ionWillClose = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionWillClose", 7);
    this.ionDidOpen = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionDidOpen", 7);
    this.ionDidClose = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionDidClose", 7);
    this.ionMenuChange = (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionMenuChange", 7);
    this.lastOnEnd = 0;
    this.blocker = _gesture_controller_17e82006_js__WEBPACK_IMPORTED_MODULE_4__.G.createBlocker({
      disableScroll: true
    });
    this.isAnimating = false;
    this._isOpen = false;
    this.inheritedAttributes = {};

    this.handleFocus = ev => {
      /**
       * Overlays have their own focus trapping listener
       * so we do not want the two listeners to conflict
       * with each other. If the top-most overlay that is
       * open does not contain this ion-menu, then ion-menu's
       * focus trapping should not run.
       */
      const lastOverlay = (0,_overlays_f469834d_js__WEBPACK_IMPORTED_MODULE_7__.k)(document);

      if (lastOverlay && !lastOverlay.contains(this.el)) {
        return;
      }

      this.trapKeyboardFocus(ev, document);
    };

    this.isPaneVisible = false;
    this.isEndSide = false;
    /**
     * If `true`, the menu is disabled.
     */

    this.disabled = false;
    /**
     * Which side of the view the menu should be placed.
     */

    this.side = 'start';
    /**
     * If `true`, swiping the menu is enabled.
     */

    this.swipeGesture = true;
    /**
     * The edge threshold for dragging the menu open.
     * If a drag/swipe happens over this value, the menu is not triggered.
     */

    this.maxEdgeStart = 50;
  }

  typeChanged(type, oldType) {
    const contentEl = this.contentEl;

    if (contentEl) {
      if (oldType !== undefined) {
        contentEl.classList.remove(`menu-content-${oldType}`);
      }

      contentEl.classList.add(`menu-content-${type}`);
      contentEl.removeAttribute('style');
    }

    if (this.menuInnerEl) {
      // Remove effects of previous animations
      this.menuInnerEl.removeAttribute('style');
    }

    this.animation = undefined;
  }

  disabledChanged() {
    this.updateState();
    this.ionMenuChange.emit({
      disabled: this.disabled,
      open: this._isOpen
    });
  }

  sideChanged() {
    this.isEndSide = (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.o)(this.side);
  }

  swipeGestureChanged() {
    this.updateState();
  }

  connectedCallback() {
    var _this = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // TODO: connectedCallback is fired in CE build
      // before WC is defined. This needs to be fixed in Stencil.
      if (typeof customElements !== 'undefined') {
        yield customElements.whenDefined('ion-menu');
      }

      if (_this.type === undefined) {
        _this.type = _ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.c.get('menuType', 'overlay');
      }

      const content = _this.contentId !== undefined ? document.getElementById(_this.contentId) : null;

      if (content === null) {
        console.error('Menu: must have a "content" element to listen for drag events on.');
        return;
      }

      if (_this.el.contains(content)) {
        console.error(`Menu: "contentId" should refer to the main view's ion-content, not the ion-content inside of the ion-menu.`);
      }

      _this.contentEl = content; // add menu's content classes

      content.classList.add('menu-content');

      _this.typeChanged(_this.type, undefined);

      _this.sideChanged(); // register this menu with the app's menu controller


      _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m._register(_this);

      _this.gesture = (yield Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./index-3f1a7d95.js */ 2172))).createGesture({
        el: document,
        gestureName: 'menu-swipe',
        gesturePriority: 30,
        threshold: 10,
        blurOnStart: true,
        canStart: ev => _this.canStart(ev),
        onWillStart: () => _this.onWillStart(),
        onStart: () => _this.onStart(),
        onMove: ev => _this.onMove(ev),
        onEnd: ev => _this.onEnd(ev)
      });

      _this.updateState();
    })();
  }

  componentWillLoad() {
    this.inheritedAttributes = (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.i)(this.el);
  }

  componentDidLoad() {
    var _this2 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.ionMenuChange.emit({
        disabled: _this2.disabled,
        open: _this2._isOpen
      });

      _this2.updateState();
    })();
  }

  disconnectedCallback() {
    this.blocker.destroy();

    _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m._unregister(this);

    if (this.animation) {
      this.animation.destroy();
    }

    if (this.gesture) {
      this.gesture.destroy();
      this.gesture = undefined;
    }

    this.animation = undefined;
    this.contentEl = this.backdropEl = this.menuInnerEl = undefined;
  }

  onSplitPaneChanged(ev) {
    this.isPaneVisible = ev.detail.isPane(this.el);
    this.updateState();
  }

  onBackdropClick(ev) {
    if (this._isOpen && this.lastOnEnd < ev.timeStamp - 100) {
      const shouldClose = ev.composedPath ? !ev.composedPath().includes(this.menuInnerEl) : false;

      if (shouldClose) {
        ev.preventDefault();
        ev.stopPropagation();
        this.close();
      }
    }
  }

  onKeydown(ev) {
    if (ev.key === 'Escape') {
      this.close();
    }
  }
  /**
   * Returns `true` is the menu is open.
   */


  isOpen() {
    return Promise.resolve(this._isOpen);
  }
  /**
   * Returns `true` is the menu is active.
   *
   * A menu is active when it can be opened or closed, meaning it's enabled
   * and it's not part of a `ion-split-pane`.
   */


  isActive() {
    return Promise.resolve(this._isActive());
  }
  /**
   * Opens the menu. If the menu is already open or it can't be opened,
   * it returns `false`.
   */


  open(animated = true) {
    return this.setOpen(true, animated);
  }
  /**
   * Closes the menu. If the menu is already closed or it can't be closed,
   * it returns `false`.
   */


  close(animated = true) {
    return this.setOpen(false, animated);
  }
  /**
   * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.
   * If the operation can't be completed successfully, it returns `false`.
   */


  toggle(animated = true) {
    return this.setOpen(!this._isOpen, animated);
  }
  /**
   * Opens or closes the button.
   * If the operation can't be completed successfully, it returns `false`.
   */


  setOpen(shouldOpen, animated = true) {
    return _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m._setOpen(this, shouldOpen, animated);
  }

  focusFirstDescendant() {
    const {
      el
    } = this;
    const firstInput = el.querySelector(focusableQueryString);

    if (firstInput) {
      firstInput.focus();
    } else {
      el.focus();
    }
  }

  focusLastDescendant() {
    const {
      el
    } = this;
    const inputs = Array.from(el.querySelectorAll(focusableQueryString));
    const lastInput = inputs.length > 0 ? inputs[inputs.length - 1] : null;

    if (lastInput) {
      lastInput.focus();
    } else {
      el.focus();
    }
  }

  trapKeyboardFocus(ev, doc) {
    const target = ev.target;

    if (!target) {
      return;
    }
    /**
     * If the target is inside the menu contents, let the browser
     * focus as normal and keep a log of the last focused element.
     */


    if (this.el.contains(target)) {
      this.lastFocus = target;
    } else {
      /**
       * Otherwise, we are about to have focus go out of the menu.
       * Wrap the focus to either the first or last element.
       */

      /**
       * Once we call `focusFirstDescendant`, another focus event
       * will fire, which will cause `lastFocus` to be updated
       * before we can run the code after that. We cache the value
       * here to avoid that.
       */
      this.focusFirstDescendant();
      /**
       * If the cached last focused element is the same as the now-
       * active element, that means the user was on the first element
       * already and pressed Shift + Tab, so we need to wrap to the
       * last descendant.
       */

      if (this.lastFocus === doc.activeElement) {
        this.focusLastDescendant();
      }
    }
  }

  _setOpen(shouldOpen, animated = true) {
    var _this3 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // If the menu is disabled or it is currently being animated, let's do nothing
      if (!_this3._isActive() || _this3.isAnimating || shouldOpen === _this3._isOpen) {
        return false;
      }

      _this3.beforeAnimation(shouldOpen);

      yield _this3.loadAnimation();
      yield _this3.startAnimation(shouldOpen, animated);

      _this3.afterAnimation(shouldOpen);

      return true;
    })();
  }

  loadAnimation() {
    var _this4 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Menu swipe animation takes the menu's inner width as parameter,
      // If `offsetWidth` changes, we need to create a new animation.
      const width = _this4.menuInnerEl.offsetWidth;

      if (width === _this4.width && _this4.animation !== undefined) {
        return;
      }

      _this4.width = width; // Destroy existing animation

      if (_this4.animation) {
        _this4.animation.destroy();

        _this4.animation = undefined;
      } // Create new animation


      _this4.animation = yield _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m._createAnimation(_this4.type, _this4);

      if (!_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('animated', true)) {
        _this4.animation.duration(0);
      }

      _this4.animation.fill('both');
    })();
  }

  startAnimation(shouldOpen, animated) {
    var _this5 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const isReversed = !shouldOpen;
      const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this5);
      const easing = mode === 'ios' ? iosEasing : mdEasing;
      const easingReverse = mode === 'ios' ? iosEasingReverse : mdEasingReverse;

      const ani = _this5.animation.direction(isReversed ? 'reverse' : 'normal').easing(isReversed ? easingReverse : easing).onFinish(() => {
        if (ani.getDirection() === 'reverse') {
          ani.direction('normal');
        }
      });

      if (animated) {
        yield ani.play();
      } else {
        ani.play({
          sync: true
        });
      }
    })();
  }

  _isActive() {
    return !this.disabled && !this.isPaneVisible;
  }

  canSwipe() {
    return this.swipeGesture && !this.isAnimating && this._isActive();
  }

  canStart(detail) {
    // Do not allow swipe gesture if a modal is open
    const isModalPresented = !!document.querySelector('ion-modal.show-modal');

    if (isModalPresented || !this.canSwipe()) {
      return false;
    }

    if (this._isOpen) {
      return true; // TODO error
    } else if (_index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m._getOpenSync()) {
      return false;
    }

    return checkEdgeSide(window, detail.currentX, this.isEndSide, this.maxEdgeStart);
  }

  onWillStart() {
    this.beforeAnimation(!this._isOpen);
    return this.loadAnimation();
  }

  onStart() {
    if (!this.isAnimating || !this.animation) {
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.n)(false, 'isAnimating has to be true');
      return;
    } // the cloned animation should not use an easing curve during seek


    this.animation.progressStart(true, this._isOpen ? 1 : 0);
  }

  onMove(detail) {
    if (!this.isAnimating || !this.animation) {
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.n)(false, 'isAnimating has to be true');
      return;
    }

    const delta = computeDelta(detail.deltaX, this._isOpen, this.isEndSide);
    const stepValue = delta / this.width;
    this.animation.progressStep(this._isOpen ? 1 - stepValue : stepValue);
  }

  onEnd(detail) {
    if (!this.isAnimating || !this.animation) {
      (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.n)(false, 'isAnimating has to be true');
      return;
    }

    const isOpen = this._isOpen;
    const isEndSide = this.isEndSide;
    const delta = computeDelta(detail.deltaX, isOpen, isEndSide);
    const width = this.width;
    const stepValue = delta / width;
    const velocity = detail.velocityX;
    const z = width / 2.0;
    const shouldCompleteRight = velocity >= 0 && (velocity > 0.2 || detail.deltaX > z);
    const shouldCompleteLeft = velocity <= 0 && (velocity < -0.2 || detail.deltaX < -z);
    const shouldComplete = isOpen ? isEndSide ? shouldCompleteRight : shouldCompleteLeft : isEndSide ? shouldCompleteLeft : shouldCompleteRight;
    let shouldOpen = !isOpen && shouldComplete;

    if (isOpen && !shouldComplete) {
      shouldOpen = true;
    }

    this.lastOnEnd = detail.currentTime; // Account for rounding errors in JS

    let newStepValue = shouldComplete ? 0.001 : -0.001;
    /**
     * TODO: stepValue can sometimes return a negative
     * value, but you can't have a negative time value
     * for the cubic bezier curve (at least with web animations)
     * Not sure if the negative step value is an error or not
     */

    const adjustedStepValue = stepValue < 0 ? 0.01 : stepValue;
    /**
     * Animation will be reversed here, so need to
     * reverse the easing curve as well
     *
     * Additionally, we need to account for the time relative
     * to the new easing curve, as `stepValue` is going to be given
     * in terms of a linear curve.
     */

    newStepValue += (0,_cubic_bezier_c313947a_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [0.4, 0], [0.6, 1], [1, 1], (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.l)(0, adjustedStepValue, 0.9999))[0] || 0;
    const playTo = this._isOpen ? !shouldComplete : shouldComplete;
    this.animation.easing('cubic-bezier(0.4, 0.0, 0.6, 1)').onFinish(() => this.afterAnimation(shouldOpen), {
      oneTimeCallback: true
    }).progressEnd(playTo ? 1 : 0, this._isOpen ? 1 - newStepValue : newStepValue, 300);
  }

  beforeAnimation(shouldOpen) {
    (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.n)(!this.isAnimating, '_before() should not be called while animating'); // this places the menu into the correct location before it animates in
    // this css class doesn't actually kick off any animations

    this.el.classList.add(SHOW_MENU);
    /**
     * We add a tabindex here so that focus trapping
     * still works even if the menu does not have
     * any focusable elements slotted inside. The
     * focus trapping utility will fallback to focusing
     * the menu so focus does not leave when the menu
     * is open.
     */

    this.el.setAttribute('tabindex', '0');

    if (this.backdropEl) {
      this.backdropEl.classList.add(SHOW_BACKDROP);
    }

    this.blocker.block();
    this.isAnimating = true;

    if (shouldOpen) {
      this.ionWillOpen.emit();
    } else {
      this.ionWillClose.emit();
    }
  }

  afterAnimation(isOpen) {
    var _a;

    (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.n)(this.isAnimating, '_before() should be called while animating'); // keep opening/closing the menu disabled for a touch more yet
    // only add listeners/css if it's enabled and isOpen
    // and only remove listeners/css if it's not open
    // emit opened/closed events

    this._isOpen = isOpen;
    this.isAnimating = false;

    if (!this._isOpen) {
      this.blocker.unblock();
    }

    if (isOpen) {
      // add css class and hide content behind menu from screen readers
      if (this.contentEl) {
        this.contentEl.classList.add(MENU_CONTENT_OPEN);
        /**
         * When the menu is open and overlaying the main
         * content, the main content should not be announced
         * by the screenreader as the menu is the main
         * focus. This is useful with screenreaders that have
         * "read from top" gestures that read the entire
         * page from top to bottom when activated.
         */

        this.contentEl.setAttribute('aria-hidden', 'true');
      } // emit open event


      this.ionDidOpen.emit();
      /**
       * Move focus to the menu to prepare focus trapping, as long as
       * it isn't already focused. Use the host element instead of the
       * first descendant to avoid the scroll position jumping around.
       */

      const focusedMenu = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.closest('ion-menu');

      if (focusedMenu !== this.el) {
        this.el.focus();
      } // start focus trapping


      document.addEventListener('focus', this.handleFocus, true);
    } else {
      // remove css classes and unhide content from screen readers
      this.el.classList.remove(SHOW_MENU);
      /**
       * Remove tabindex from the menu component
       * so that is cannot be tabbed to.
       */

      this.el.removeAttribute('tabindex');

      if (this.contentEl) {
        this.contentEl.classList.remove(MENU_CONTENT_OPEN);
        /**
         * Remove aria-hidden so screen readers
         * can announce the main content again
         * now that the menu is not the main focus.
         */

        this.contentEl.removeAttribute('aria-hidden');
      }

      if (this.backdropEl) {
        this.backdropEl.classList.remove(SHOW_BACKDROP);
      }

      if (this.animation) {
        this.animation.stop();
      } // emit close event


      this.ionDidClose.emit(); // undo focus trapping so multiple menus don't collide

      document.removeEventListener('focus', this.handleFocus, true);
    }
  }

  updateState() {
    const isActive = this._isActive();

    if (this.gesture) {
      this.gesture.enable(isActive && this.swipeGesture);
    } // Close menu immediately


    if (!isActive && this._isOpen) {
      // close if this menu is open, and should not be enabled
      this.forceClosing();
    }

    if (!this.disabled) {
      _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m._setActiveMenu(this);
    }

    (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.n)(!this.isAnimating, 'can not be animating');
  }

  forceClosing() {
    (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.n)(this._isOpen, 'menu cannot be closed');
    this.isAnimating = true;
    const ani = this.animation.direction('reverse');
    ani.play({
      sync: true
    });
    this.afterAnimation(false);
  }

  render() {
    const {
      isEndSide,
      type,
      disabled,
      isPaneVisible,
      inheritedAttributes
    } = this;
    const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      role: "navigation",
      "aria-label": inheritedAttributes['aria-label'] || 'menu',
      class: {
        [mode]: true,
        [`menu-type-${type}`]: true,
        'menu-enabled': !disabled,
        'menu-side-end': isEndSide,
        'menu-side-start': !isEndSide,
        'menu-pane-visible': isPaneVisible
      }
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "menu-inner",
      part: "container",
      ref: el => this.menuInnerEl = el
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)), (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-backdrop", {
      ref: el => this.backdropEl = el,
      class: "menu-backdrop",
      tappable: false,
      stopPropagation: false,
      part: "backdrop"
    }));
  }

  get el() {
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

  static get watchers() {
    return {
      "type": ["typeChanged"],
      "disabled": ["disabledChanged"],
      "side": ["sideChanged"],
      "swipeGesture": ["swipeGestureChanged"]
    };
  }

};

const computeDelta = (deltaX, isOpen, isEndSide) => {
  return Math.max(0, isOpen !== isEndSide ? -deltaX : deltaX);
};

const checkEdgeSide = (win, posX, isEndSide, maxEdgeStart) => {
  if (isEndSide) {
    return posX >= win.innerWidth - maxEdgeStart;
  } else {
    return posX <= maxEdgeStart;
  }
};

const SHOW_MENU = 'show-menu';
const SHOW_BACKDROP = 'show-backdrop';
const MENU_CONTENT_OPEN = 'menu-content-open';
Menu.style = {
  ios: menuIosCss,
  md: menuMdCss
}; // Given a menu, return whether or not the menu toggle should be visible

const updateVisibility = /*#__PURE__*/function () {
  var _ref = (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (menu) {
    const menuEl = yield _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m.get(menu);
    return !!(menuEl && (yield menuEl.isActive()));
  });

  return function updateVisibility(_x) {
    return _ref.apply(this, arguments);
  };
}();

const menuButtonIosCss = ":host{--background:transparent;--color-focused:currentColor;--border-radius:initial;--padding-top:0;--padding-bottom:0;color:var(--color);text-align:center;text-decoration:none;text-overflow:ellipsis;text-transform:none;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:var(--border-radius);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;border:0;outline:none;background:var(--background);line-height:1;cursor:pointer;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}ion-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;pointer-events:none}:host(.menu-button-hidden){display:none}:host(.menu-button-disabled){cursor:default;opacity:0.5;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity, 0)}}:host(.ion-color) .button-native{color:var(--ion-color-base)}:host(.in-toolbar:not(.in-toolbar-color)){color:var(--ion-toolbar-color, var(--color))}:host{--background-focused:currentColor;--background-focused-opacity:.1;--border-radius:4px;--color:var(--ion-color-primary, #3880ff);--padding-start:5px;--padding-end:5px;height:32px;font-size:31px}:host(.ion-activated){opacity:0.4}@media (any-hover: hover){:host(:hover){opacity:0.6}}";
const menuButtonMdCss = ":host{--background:transparent;--color-focused:currentColor;--border-radius:initial;--padding-top:0;--padding-bottom:0;color:var(--color);text-align:center;text-decoration:none;text-overflow:ellipsis;text-transform:none;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:var(--border-radius);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;border:0;outline:none;background:var(--background);line-height:1;cursor:pointer;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}ion-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;pointer-events:none}:host(.menu-button-hidden){display:none}:host(.menu-button-disabled){cursor:default;opacity:0.5;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity, 0)}}:host(.ion-color) .button-native{color:var(--ion-color-base)}:host(.in-toolbar:not(.in-toolbar-color)){color:var(--ion-toolbar-color, var(--color))}:host{--background-focused:currentColor;--background-focused-opacity:.12;--background-hover:currentColor;--background-hover-opacity:.04;--border-radius:50%;--color:initial;--padding-start:8px;--padding-end:8px;width:48px;height:48px;font-size:24px}:host(.ion-color.ion-focused)::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.ion-color:hover) .button-native::after{background:var(--ion-color-base)}}";
const MenuButton = class {
  constructor(hostRef) {
    var _this6 = this;

    (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.inheritedAttributes = {};
    this.visible = false;
    /**
     * If `true`, the user cannot interact with the menu button.
     */

    this.disabled = false;
    /**
     * Automatically hides the menu button when the corresponding menu is not active
     */

    this.autoHide = true;
    /**
     * The type of the button.
     */

    this.type = 'button';
    this.onClick = /*#__PURE__*/(0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m.toggle(_this6.menu);
    });
  }

  componentWillLoad() {
    this.inheritedAttributes = (0,_helpers_4d272360_js__WEBPACK_IMPORTED_MODULE_5__.i)(this.el);
  }

  componentDidLoad() {
    this.visibilityChanged();
  }

  visibilityChanged() {
    var _this7 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this7.visible = yield updateVisibility(_this7.menu);
    })();
  }

  render() {
    const {
      color,
      disabled,
      inheritedAttributes
    } = this;
    const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const menuIcon = _ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.c.get('menuIcon', mode === 'ios' ? _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_8__.u : _index_40bb69ee_js__WEBPACK_IMPORTED_MODULE_8__.v);
    const hidden = this.autoHide && !this.visible;
    const attrs = {
      type: this.type
    };
    const ariaLabel = inheritedAttributes['aria-label'] || 'menu';
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick,
      "aria-disabled": disabled ? 'true' : null,
      "aria-hidden": hidden ? 'true' : null,
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__.c)(color, {
        [mode]: true,
        button: true,
        'menu-button-hidden': hidden,
        'menu-button-disabled': disabled,
        'in-toolbar': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__.h)('ion-toolbar[color]', this.el),
        'ion-activatable': true,
        'ion-focusable': true
      })
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", Object.assign({}, attrs, {
      disabled: disabled,
      class: "button-native",
      part: "native",
      "aria-label": ariaLabel
    }), (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
      class: "button-inner"
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-icon", {
      part: "icon",
      icon: menuIcon,
      mode: mode,
      lazy: false,
      "aria-hidden": "true"
    }))), mode === 'md' && (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-ripple-effect", {
      type: "unbounded"
    })));
  }

  get el() {
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

};
MenuButton.style = {
  ios: menuButtonIosCss,
  md: menuButtonMdCss
};
const menuToggleCss = ":host(.menu-toggle-hidden){display:none}";
const MenuToggle = class {
  constructor(hostRef) {
    (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.visible = false;
    /**
     * Automatically hides the content when the corresponding menu is not active.
     *
     * By default, it's `true`. Change it to `false` in order to
     * keep `ion-menu-toggle` always visible regardless the state of the menu.
     */

    this.autoHide = true;

    this.onClick = () => {
      return _index_e7c8c45c_js__WEBPACK_IMPORTED_MODULE_6__.m.toggle(this.menu);
    };
  }

  connectedCallback() {
    this.visibilityChanged();
  }

  visibilityChanged() {
    var _this8 = this;

    return (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this8.visible = yield updateVisibility(_this8.menu);
    })();
  }

  render() {
    const mode = (0,_ionic_global_04e268e7_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const hidden = this.autoHide && !this.visible;
    return (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick,
      "aria-hidden": hidden ? 'true' : null,
      class: {
        [mode]: true,
        'menu-toggle-hidden': hidden
      }
    }, (0,_index_1a99aeb7_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }

};
MenuToggle.style = menuToggleCss;


/***/ }),

/***/ 320:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createColorClasses),
/* harmony export */   "g": () => (/* binding */ getClassMap),
/* harmony export */   "h": () => (/* binding */ hostContext),
/* harmony export */   "o": () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */


const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};

const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }

  return [];
};

const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};

const SCHEME = /^[a-z][a-z0-9+\-.]*:/;

const openURL = /*#__PURE__*/function () {
  var _ref = (0,C_proyecto_Ionic_Proyecto_semestral_proyecto_semestral_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');

      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }

        return router.push(url, direction, animation);
      }
    }

    return false;
  });

  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLW1lbnVfM19lbnRyeV9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNa0MsVUFBVSxHQUFHLDB2REFBbkI7QUFFQSxNQUFNQyxTQUFTLEdBQUcsd3lEQUFsQjtBQUVBLE1BQU1DLFNBQVMsR0FBRyw2QkFBbEI7QUFDQSxNQUFNQyxRQUFRLEdBQUcsNkJBQWpCO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsZ0NBQXpCO0FBQ0EsTUFBTUMsZUFBZSxHQUFHLDhCQUF4QjtBQUNBLE1BQU1DLG9CQUFvQixHQUFHLDhNQUE3QjtBQUNBLE1BQU1DLElBQUksR0FBRyxNQUFNO0VBQ2pCQyxXQUFXLENBQUNDLE9BQUQsRUFBVTtJQUNuQjFDLHFEQUFnQixDQUFDLElBQUQsRUFBTzBDLE9BQVAsQ0FBaEI7SUFDQSxLQUFLQyxXQUFMLEdBQW1CekMscURBQVcsQ0FBQyxJQUFELEVBQU8sYUFBUCxFQUFzQixDQUF0QixDQUE5QjtJQUNBLEtBQUswQyxZQUFMLEdBQW9CMUMscURBQVcsQ0FBQyxJQUFELEVBQU8sY0FBUCxFQUF1QixDQUF2QixDQUEvQjtJQUNBLEtBQUsyQyxVQUFMLEdBQWtCM0MscURBQVcsQ0FBQyxJQUFELEVBQU8sWUFBUCxFQUFxQixDQUFyQixDQUE3QjtJQUNBLEtBQUs0QyxXQUFMLEdBQW1CNUMscURBQVcsQ0FBQyxJQUFELEVBQU8sYUFBUCxFQUFzQixDQUF0QixDQUE5QjtJQUNBLEtBQUs2QyxhQUFMLEdBQXFCN0MscURBQVcsQ0FBQyxJQUFELEVBQU8sZUFBUCxFQUF3QixDQUF4QixDQUFoQztJQUNBLEtBQUs4QyxTQUFMLEdBQWlCLENBQWpCO0lBQ0EsS0FBS0MsT0FBTCxHQUFlbEMsNEVBQUEsQ0FBaUM7TUFB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L2Rpc3QvZXNtL2lvbi1tZW51XzMuZW50cnkuanMiLCIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS90aGVtZS03NjcwMzQxYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBlIGFzIGNyZWF0ZUV2ZW50LCBoLCBIIGFzIEhvc3QsIGkgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtMWE5OWFlYjcuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25maWcsIGIgYXMgZ2V0SW9uTW9kZSB9IGZyb20gJy4vaW9uaWMtZ2xvYmFsLTA0ZTI2OGU3LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24gfSBmcm9tICcuL2N1YmljLWJlemllci1jMzEzOTQ3YS5qcyc7XG5pbXBvcnQgeyBHIGFzIEdFU1RVUkVfQ09OVFJPTExFUiB9IGZyb20gJy4vZ2VzdHVyZS1jb250cm9sbGVyLTE3ZTgyMDA2LmpzJztcbmltcG9ydCB7IG8gYXMgaXNFbmRTaWRlLCBpIGFzIGluaGVyaXRBcmlhQXR0cmlidXRlcywgbiBhcyBhc3NlcnQsIGwgYXMgY2xhbXAgfSBmcm9tICcuL2hlbHBlcnMtNGQyNzIzNjAuanMnO1xuaW1wb3J0IHsgbSBhcyBtZW51Q29udHJvbGxlciB9IGZyb20gJy4vaW5kZXgtZTdjOGM0NWMuanMnO1xuaW1wb3J0IHsgayBhcyBnZXRPdmVybGF5IH0gZnJvbSAnLi9vdmVybGF5cy1mNDY5ODM0ZC5qcyc7XG5pbXBvcnQgeyB1IGFzIG1lbnVPdXRsaW5lLCB2IGFzIG1lbnVTaGFycCB9IGZyb20gJy4vaW5kZXgtNDBiYjY5ZWUuanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVDb2xvckNsYXNzZXMsIGggYXMgaG9zdENvbnRleHQgfSBmcm9tICcuL3RoZW1lLTc2NzAzNDFjLmpzJztcbmltcG9ydCAnLi9oYXJkd2FyZS1iYWNrLWJ1dHRvbi00OTBkZjExNS5qcyc7XG5pbXBvcnQgJy4vYW5pbWF0aW9uLTM2YzFkNzdkLmpzJztcblxuY29uc3QgbWVudUlvc0NzcyA9IFwiOmhvc3R7LS13aWR0aDozMDRweDstLW1pbi13aWR0aDphdXRvOy0tbWF4LXdpZHRoOmF1dG87LS1oZWlnaHQ6MTAwJTstLW1pbi1oZWlnaHQ6YXV0bzstLW1heC1oZWlnaHQ6YXV0bzstLWJhY2tncm91bmQ6dmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpO2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtjb250YWluOnN0cmljdH06aG9zdCguc2hvdy1tZW51KXtkaXNwbGF5OmJsb2NrfS5tZW51LWlubmVye2xlZnQ6MDtyaWdodDphdXRvO3RvcDowO2JvdHRvbTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTk5OTlweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTk5OTlweCk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKTttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoKTtoZWlnaHQ6dmFyKC0taGVpZ2h0KTttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb250YWluOnN0cmljdH1bZGlyPXJ0bF0gLm1lbnUtaW5uZXIsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIC5tZW51LWlubmVye2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7bGVmdDphdXRvO3JpZ2h0OjB9Omhvc3QoLm1lbnUtc2lkZS1zdGFydCkgLm1lbnUtaW5uZXJ7LS1pb24tc2FmZS1hcmVhLXJpZ2h0OjBweDtyaWdodDphdXRvO2xlZnQ6MH06aG9zdCgubWVudS1zaWRlLWVuZCkgLm1lbnUtaW5uZXJ7LS1pb24tc2FmZS1hcmVhLWxlZnQ6MHB4O3JpZ2h0OjA7bGVmdDphdXRvO31pb24tYmFja2Ryb3B7ZGlzcGxheTpub25lO29wYWNpdHk6MC4wMTt6LWluZGV4Oi0xfUBtZWRpYSAobWF4LXdpZHRoOiAzNDBweCl7Lm1lbnUtaW5uZXJ7LS13aWR0aDoyNjRweH19Omhvc3QoLm1lbnUtdHlwZS1yZXZlYWwpe3otaW5kZXg6MH06aG9zdCgubWVudS10eXBlLXJldmVhbC5zaG93LW1lbnUpIC5tZW51LWlubmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgMCl9Omhvc3QoLm1lbnUtdHlwZS1vdmVybGF5KXt6LWluZGV4OjEwMDB9Omhvc3QoLm1lbnUtdHlwZS1vdmVybGF5KSAuc2hvdy1iYWNrZHJvcHtkaXNwbGF5OmJsb2NrO2N1cnNvcjpwb2ludGVyfTpob3N0KC5tZW51LXBhbmUtdmlzaWJsZSl7d2lkdGg6dmFyKC0td2lkdGgpO21pbi13aWR0aDp2YXIoLS1taW4td2lkdGgpO21heC13aWR0aDp2YXIoLS1tYXgtd2lkdGgpfTpob3N0KC5tZW51LXBhbmUtdmlzaWJsZSkgLm1lbnUtaW5uZXJ7bGVmdDowO3JpZ2h0OjA7d2lkdGg6YXV0bzstd2Via2l0LXRyYW5zZm9ybTpub25lICFpbXBvcnRhbnQ7dHJhbnNmb3JtOm5vbmUgIWltcG9ydGFudDstd2Via2l0LWJveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50O2JveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fTpob3N0KC5tZW51LXBhbmUtdmlzaWJsZSkgaW9uLWJhY2tkcm9we2Rpc3BsYXk6aGlkZGVuICFpbXBvcnRhbnQ7fTpob3N0KC5tZW51LXR5cGUtcHVzaCl7ei1pbmRleDoxMDAwfTpob3N0KC5tZW51LXR5cGUtcHVzaCkgLnNob3ctYmFja2Ryb3B7ZGlzcGxheTpibG9ja31cIjtcblxuY29uc3QgbWVudU1kQ3NzID0gXCI6aG9zdHstLXdpZHRoOjMwNHB4Oy0tbWluLXdpZHRoOmF1dG87LS1tYXgtd2lkdGg6YXV0bzstLWhlaWdodDoxMDAlOy0tbWluLWhlaWdodDphdXRvOy0tbWF4LWhlaWdodDphdXRvOy0tYmFja2dyb3VuZDp2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZik7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjA7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRhaW46c3RyaWN0fTpob3N0KC5zaG93LW1lbnUpe2Rpc3BsYXk6YmxvY2t9Lm1lbnUtaW5uZXJ7bGVmdDowO3JpZ2h0OmF1dG87dG9wOjA7Ym90dG9tOjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtOTk5OXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtOTk5OXB4KTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47d2lkdGg6dmFyKC0td2lkdGgpO21pbi13aWR0aDp2YXIoLS1taW4td2lkdGgpO21heC13aWR0aDp2YXIoLS1tYXgtd2lkdGgpO2hlaWdodDp2YXIoLS1oZWlnaHQpO21pbi1oZWlnaHQ6dmFyKC0tbWluLWhlaWdodCk7bWF4LWhlaWdodDp2YXIoLS1tYXgtaGVpZ2h0KTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2NvbnRhaW46c3RyaWN0fVtkaXI9cnRsXSAubWVudS1pbm5lciw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLm1lbnUtaW5uZXJ7bGVmdDp1bnNldDtyaWdodDp1bnNldDtsZWZ0OmF1dG87cmlnaHQ6MH06aG9zdCgubWVudS1zaWRlLXN0YXJ0KSAubWVudS1pbm5lcnstLWlvbi1zYWZlLWFyZWEtcmlnaHQ6MHB4O3JpZ2h0OmF1dG87bGVmdDowfTpob3N0KC5tZW51LXNpZGUtZW5kKSAubWVudS1pbm5lcnstLWlvbi1zYWZlLWFyZWEtbGVmdDowcHg7cmlnaHQ6MDtsZWZ0OmF1dG87fWlvbi1iYWNrZHJvcHtkaXNwbGF5Om5vbmU7b3BhY2l0eTowLjAxO3otaW5kZXg6LTF9QG1lZGlhIChtYXgtd2lkdGg6IDM0MHB4KXsubWVudS1pbm5lcnstLXdpZHRoOjI2NHB4fX06aG9zdCgubWVudS10eXBlLXJldmVhbCl7ei1pbmRleDowfTpob3N0KC5tZW51LXR5cGUtcmV2ZWFsLnNob3ctbWVudSkgLm1lbnUtaW5uZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICAwKX06aG9zdCgubWVudS10eXBlLW92ZXJsYXkpe3otaW5kZXg6MTAwMH06aG9zdCgubWVudS10eXBlLW92ZXJsYXkpIC5zaG93LWJhY2tkcm9we2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXJ9Omhvc3QoLm1lbnUtcGFuZS12aXNpYmxlKXt3aWR0aDp2YXIoLS13aWR0aCk7bWluLXdpZHRoOnZhcigtLW1pbi13aWR0aCk7bWF4LXdpZHRoOnZhcigtLW1heC13aWR0aCl9Omhvc3QoLm1lbnUtcGFuZS12aXNpYmxlKSAubWVudS1pbm5lcntsZWZ0OjA7cmlnaHQ6MDt3aWR0aDphdXRvOy13ZWJraXQtdHJhbnNmb3JtOm5vbmUgIWltcG9ydGFudDt0cmFuc2Zvcm06bm9uZSAhaW1wb3J0YW50Oy13ZWJraXQtYm94LXNoYWRvdzpub25lICFpbXBvcnRhbnQ7Ym94LXNoYWRvdzpub25lICFpbXBvcnRhbnR9Omhvc3QoLm1lbnUtcGFuZS12aXNpYmxlKSBpb24tYmFja2Ryb3B7ZGlzcGxheTpoaWRkZW4gIWltcG9ydGFudDt9Omhvc3QoLm1lbnUtdHlwZS1vdmVybGF5KSAubWVudS1pbm5lcnstd2Via2l0LWJveC1zaGFkb3c6NHB4IDBweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4xOCk7Ym94LXNoYWRvdzo0cHggMHB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjE4KX1cIjtcblxuY29uc3QgaW9zRWFzaW5nID0gJ2N1YmljLWJlemllcigwLjMyLDAuNzIsMCwxKSc7XG5jb25zdCBtZEVhc2luZyA9ICdjdWJpYy1iZXppZXIoMC4wLDAuMCwwLjIsMSknO1xuY29uc3QgaW9zRWFzaW5nUmV2ZXJzZSA9ICdjdWJpYy1iZXppZXIoMSwgMCwgMC42OCwgMC4yOCknO1xuY29uc3QgbWRFYXNpbmdSZXZlcnNlID0gJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknO1xuY29uc3QgZm9jdXNhYmxlUXVlcnlTdHJpbmcgPSAnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pLCBpbnB1dDpub3QoW3R5cGU9aGlkZGVuXSk6bm90KFt0YWJpbmRleF49XCItXCJdKSwgdGV4dGFyZWE6bm90KFt0YWJpbmRleF49XCItXCJdKSwgYnV0dG9uOm5vdChbdGFiaW5kZXhePVwiLVwiXSksIHNlbGVjdDpub3QoW3RhYmluZGV4Xj1cIi1cIl0pLCAuaW9uLWZvY3VzYWJsZTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pJztcbmNvbnN0IE1lbnUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW9uV2lsbE9wZW4gPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbldpbGxPcGVuXCIsIDcpO1xuICAgIHRoaXMuaW9uV2lsbENsb3NlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25XaWxsQ2xvc2VcIiwgNyk7XG4gICAgdGhpcy5pb25EaWRPcGVuID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25EaWRPcGVuXCIsIDcpO1xuICAgIHRoaXMuaW9uRGlkQ2xvc2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkRpZENsb3NlXCIsIDcpO1xuICAgIHRoaXMuaW9uTWVudUNoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uTWVudUNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmxhc3RPbkVuZCA9IDA7XG4gICAgdGhpcy5ibG9ja2VyID0gR0VTVFVSRV9DT05UUk9MTEVSLmNyZWF0ZUJsb2NrZXIoeyBkaXNhYmxlU2Nyb2xsOiB0cnVlIH0pO1xuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICB0aGlzLmluaGVyaXRlZEF0dHJpYnV0ZXMgPSB7fTtcbiAgICB0aGlzLmhhbmRsZUZvY3VzID0gKGV2KSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJsYXlzIGhhdmUgdGhlaXIgb3duIGZvY3VzIHRyYXBwaW5nIGxpc3RlbmVyXG4gICAgICAgKiBzbyB3ZSBkbyBub3Qgd2FudCB0aGUgdHdvIGxpc3RlbmVycyB0byBjb25mbGljdFxuICAgICAgICogd2l0aCBlYWNoIG90aGVyLiBJZiB0aGUgdG9wLW1vc3Qgb3ZlcmxheSB0aGF0IGlzXG4gICAgICAgKiBvcGVuIGRvZXMgbm90IGNvbnRhaW4gdGhpcyBpb24tbWVudSwgdGhlbiBpb24tbWVudSdzXG4gICAgICAgKiBmb2N1cyB0cmFwcGluZyBzaG91bGQgbm90IHJ1bi5cbiAgICAgICAqL1xuICAgICAgY29uc3QgbGFzdE92ZXJsYXkgPSBnZXRPdmVybGF5KGRvY3VtZW50KTtcbiAgICAgIGlmIChsYXN0T3ZlcmxheSAmJiAhbGFzdE92ZXJsYXkuY29udGFpbnModGhpcy5lbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy50cmFwS2V5Ym9hcmRGb2N1cyhldiwgZG9jdW1lbnQpO1xuICAgIH07XG4gICAgdGhpcy5pc1BhbmVWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5pc0VuZFNpZGUgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGlzIGRpc2FibGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBXaGljaCBzaWRlIG9mIHRoZSB2aWV3IHRoZSBtZW51IHNob3VsZCBiZSBwbGFjZWQuXG4gICAgICovXG4gICAgdGhpcy5zaWRlID0gJ3N0YXJ0JztcbiAgICAvKipcbiAgICAgKiBJZiBgdHJ1ZWAsIHN3aXBpbmcgdGhlIG1lbnUgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICB0aGlzLnN3aXBlR2VzdHVyZSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogVGhlIGVkZ2UgdGhyZXNob2xkIGZvciBkcmFnZ2luZyB0aGUgbWVudSBvcGVuLlxuICAgICAqIElmIGEgZHJhZy9zd2lwZSBoYXBwZW5zIG92ZXIgdGhpcyB2YWx1ZSwgdGhlIG1lbnUgaXMgbm90IHRyaWdnZXJlZC5cbiAgICAgKi9cbiAgICB0aGlzLm1heEVkZ2VTdGFydCA9IDUwO1xuICB9XG4gIHR5cGVDaGFuZ2VkKHR5cGUsIG9sZFR5cGUpIHtcbiAgICBjb25zdCBjb250ZW50RWwgPSB0aGlzLmNvbnRlbnRFbDtcbiAgICBpZiAoY29udGVudEVsKSB7XG4gICAgICBpZiAob2xkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRlbnRFbC5jbGFzc0xpc3QucmVtb3ZlKGBtZW51LWNvbnRlbnQtJHtvbGRUeXBlfWApO1xuICAgICAgfVxuICAgICAgY29udGVudEVsLmNsYXNzTGlzdC5hZGQoYG1lbnUtY29udGVudC0ke3R5cGV9YCk7XG4gICAgICBjb250ZW50RWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgIH1cbiAgICBpZiAodGhpcy5tZW51SW5uZXJFbCkge1xuICAgICAgLy8gUmVtb3ZlIGVmZmVjdHMgb2YgcHJldmlvdXMgYW5pbWF0aW9uc1xuICAgICAgdGhpcy5tZW51SW5uZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgfVxuICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICB9XG4gIGRpc2FibGVkQ2hhbmdlZCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gICAgdGhpcy5pb25NZW51Q2hhbmdlLmVtaXQoe1xuICAgICAgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWQsXG4gICAgICBvcGVuOiB0aGlzLl9pc09wZW4sXG4gICAgfSk7XG4gIH1cbiAgc2lkZUNoYW5nZWQoKSB7XG4gICAgdGhpcy5pc0VuZFNpZGUgPSBpc0VuZFNpZGUodGhpcy5zaWRlKTtcbiAgfVxuICBzd2lwZUdlc3R1cmVDaGFuZ2VkKCkge1xuICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgfVxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAvLyBUT0RPOiBjb25uZWN0ZWRDYWxsYmFjayBpcyBmaXJlZCBpbiBDRSBidWlsZFxuICAgIC8vIGJlZm9yZSBXQyBpcyBkZWZpbmVkLiBUaGlzIG5lZWRzIHRvIGJlIGZpeGVkIGluIFN0ZW5jaWwuXG4gICAgaWYgKHR5cGVvZiBjdXN0b21FbGVtZW50cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGF3YWl0IGN1c3RvbUVsZW1lbnRzLndoZW5EZWZpbmVkKCdpb24tbWVudScpO1xuICAgIH1cbiAgICBpZiAodGhpcy50eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMudHlwZSA9IGNvbmZpZy5nZXQoJ21lbnVUeXBlJywgJ292ZXJsYXknKTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudCA9IHRoaXMuY29udGVudElkICE9PSB1bmRlZmluZWQgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbnRlbnRJZCkgOiBudWxsO1xuICAgIGlmIChjb250ZW50ID09PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNZW51OiBtdXN0IGhhdmUgYSBcImNvbnRlbnRcIiBlbGVtZW50IHRvIGxpc3RlbiBmb3IgZHJhZyBldmVudHMgb24uJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmVsLmNvbnRhaW5zKGNvbnRlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNZW51OiBcImNvbnRlbnRJZFwiIHNob3VsZCByZWZlciB0byB0aGUgbWFpbiB2aWV3J3MgaW9uLWNvbnRlbnQsIG5vdCB0aGUgaW9uLWNvbnRlbnQgaW5zaWRlIG9mIHRoZSBpb24tbWVudS5gKTtcbiAgICB9XG4gICAgdGhpcy5jb250ZW50RWwgPSBjb250ZW50O1xuICAgIC8vIGFkZCBtZW51J3MgY29udGVudCBjbGFzc2VzXG4gICAgY29udGVudC5jbGFzc0xpc3QuYWRkKCdtZW51LWNvbnRlbnQnKTtcbiAgICB0aGlzLnR5cGVDaGFuZ2VkKHRoaXMudHlwZSwgdW5kZWZpbmVkKTtcbiAgICB0aGlzLnNpZGVDaGFuZ2VkKCk7XG4gICAgLy8gcmVnaXN0ZXIgdGhpcyBtZW51IHdpdGggdGhlIGFwcCdzIG1lbnUgY29udHJvbGxlclxuICAgIG1lbnVDb250cm9sbGVyLl9yZWdpc3Rlcih0aGlzKTtcbiAgICB0aGlzLmdlc3R1cmUgPSAoYXdhaXQgaW1wb3J0KCcuL2luZGV4LTNmMWE3ZDk1LmpzJykpLmNyZWF0ZUdlc3R1cmUoe1xuICAgICAgZWw6IGRvY3VtZW50LFxuICAgICAgZ2VzdHVyZU5hbWU6ICdtZW51LXN3aXBlJyxcbiAgICAgIGdlc3R1cmVQcmlvcml0eTogMzAsXG4gICAgICB0aHJlc2hvbGQ6IDEwLFxuICAgICAgYmx1ck9uU3RhcnQ6IHRydWUsXG4gICAgICBjYW5TdGFydDogKGV2KSA9PiB0aGlzLmNhblN0YXJ0KGV2KSxcbiAgICAgIG9uV2lsbFN0YXJ0OiAoKSA9PiB0aGlzLm9uV2lsbFN0YXJ0KCksXG4gICAgICBvblN0YXJ0OiAoKSA9PiB0aGlzLm9uU3RhcnQoKSxcbiAgICAgIG9uTW92ZTogKGV2KSA9PiB0aGlzLm9uTW92ZShldiksXG4gICAgICBvbkVuZDogKGV2KSA9PiB0aGlzLm9uRW5kKGV2KSxcbiAgICB9KTtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gIH1cbiAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgdGhpcy5pbmhlcml0ZWRBdHRyaWJ1dGVzID0gaW5oZXJpdEFyaWFBdHRyaWJ1dGVzKHRoaXMuZWwpO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgdGhpcy5pb25NZW51Q2hhbmdlLmVtaXQoeyBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCwgb3BlbjogdGhpcy5faXNPcGVuIH0pO1xuICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmJsb2NrZXIuZGVzdHJveSgpO1xuICAgIG1lbnVDb250cm9sbGVyLl91bnJlZ2lzdGVyKHRoaXMpO1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgdGhpcy5hbmltYXRpb24uZGVzdHJveSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICB0aGlzLmdlc3R1cmUuZGVzdHJveSgpO1xuICAgICAgdGhpcy5nZXN0dXJlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLmFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbnRlbnRFbCA9IHRoaXMuYmFja2Ryb3BFbCA9IHRoaXMubWVudUlubmVyRWwgPSB1bmRlZmluZWQ7XG4gIH1cbiAgb25TcGxpdFBhbmVDaGFuZ2VkKGV2KSB7XG4gICAgdGhpcy5pc1BhbmVWaXNpYmxlID0gZXYuZGV0YWlsLmlzUGFuZSh0aGlzLmVsKTtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gIH1cbiAgb25CYWNrZHJvcENsaWNrKGV2KSB7XG4gICAgaWYgKHRoaXMuX2lzT3BlbiAmJiB0aGlzLmxhc3RPbkVuZCA8IGV2LnRpbWVTdGFtcCAtIDEwMCkge1xuICAgICAgY29uc3Qgc2hvdWxkQ2xvc2UgPSBldi5jb21wb3NlZFBhdGggPyAhZXYuY29tcG9zZWRQYXRoKCkuaW5jbHVkZXModGhpcy5tZW51SW5uZXJFbCkgOiBmYWxzZTtcbiAgICAgIGlmIChzaG91bGRDbG9zZSkge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBvbktleWRvd24oZXYpIHtcbiAgICBpZiAoZXYua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBgdHJ1ZWAgaXMgdGhlIG1lbnUgaXMgb3Blbi5cbiAgICovXG4gIGlzT3BlbigpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2lzT3Blbik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYHRydWVgIGlzIHRoZSBtZW51IGlzIGFjdGl2ZS5cbiAgICpcbiAgICogQSBtZW51IGlzIGFjdGl2ZSB3aGVuIGl0IGNhbiBiZSBvcGVuZWQgb3IgY2xvc2VkLCBtZWFuaW5nIGl0J3MgZW5hYmxlZFxuICAgKiBhbmQgaXQncyBub3QgcGFydCBvZiBhIGBpb24tc3BsaXQtcGFuZWAuXG4gICAqL1xuICBpc0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2lzQWN0aXZlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBPcGVucyB0aGUgbWVudS4gSWYgdGhlIG1lbnUgaXMgYWxyZWFkeSBvcGVuIG9yIGl0IGNhbid0IGJlIG9wZW5lZCxcbiAgICogaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgKi9cbiAgb3BlbihhbmltYXRlZCA9IHRydWUpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRPcGVuKHRydWUsIGFuaW1hdGVkKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBtZW51LiBJZiB0aGUgbWVudSBpcyBhbHJlYWR5IGNsb3NlZCBvciBpdCBjYW4ndCBiZSBjbG9zZWQsXG4gICAqIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICovXG4gIGNsb3NlKGFuaW1hdGVkID0gdHJ1ZSkge1xuICAgIHJldHVybiB0aGlzLnNldE9wZW4oZmFsc2UsIGFuaW1hdGVkKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgbWVudS4gSWYgdGhlIG1lbnUgaXMgYWxyZWFkeSBvcGVuLCBpdCB3aWxsIHRyeSB0byBjbG9zZSwgb3RoZXJ3aXNlIGl0IHdpbGwgdHJ5IHRvIG9wZW4gaXQuXG4gICAqIElmIHRoZSBvcGVyYXRpb24gY2FuJ3QgYmUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSwgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgKi9cbiAgdG9nZ2xlKGFuaW1hdGVkID0gdHJ1ZSkge1xuICAgIHJldHVybiB0aGlzLnNldE9wZW4oIXRoaXMuX2lzT3BlbiwgYW5pbWF0ZWQpO1xuICB9XG4gIC8qKlxuICAgKiBPcGVucyBvciBjbG9zZXMgdGhlIGJ1dHRvbi5cbiAgICogSWYgdGhlIG9wZXJhdGlvbiBjYW4ndCBiZSBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LCBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAqL1xuICBzZXRPcGVuKHNob3VsZE9wZW4sIGFuaW1hdGVkID0gdHJ1ZSkge1xuICAgIHJldHVybiBtZW51Q29udHJvbGxlci5fc2V0T3Blbih0aGlzLCBzaG91bGRPcGVuLCBhbmltYXRlZCk7XG4gIH1cbiAgZm9jdXNGaXJzdERlc2NlbmRhbnQoKSB7XG4gICAgY29uc3QgeyBlbCB9ID0gdGhpcztcbiAgICBjb25zdCBmaXJzdElucHV0ID0gZWwucXVlcnlTZWxlY3Rvcihmb2N1c2FibGVRdWVyeVN0cmluZyk7XG4gICAgaWYgKGZpcnN0SW5wdXQpIHtcbiAgICAgIGZpcnN0SW5wdXQuZm9jdXMoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBlbC5mb2N1cygpO1xuICAgIH1cbiAgfVxuICBmb2N1c0xhc3REZXNjZW5kYW50KCkge1xuICAgIGNvbnN0IHsgZWwgfSA9IHRoaXM7XG4gICAgY29uc3QgaW5wdXRzID0gQXJyYXkuZnJvbShlbC5xdWVyeVNlbGVjdG9yQWxsKGZvY3VzYWJsZVF1ZXJ5U3RyaW5nKSk7XG4gICAgY29uc3QgbGFzdElucHV0ID0gaW5wdXRzLmxlbmd0aCA+IDAgPyBpbnB1dHNbaW5wdXRzLmxlbmd0aCAtIDFdIDogbnVsbDtcbiAgICBpZiAobGFzdElucHV0KSB7XG4gICAgICBsYXN0SW5wdXQuZm9jdXMoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBlbC5mb2N1cygpO1xuICAgIH1cbiAgfVxuICB0cmFwS2V5Ym9hcmRGb2N1cyhldiwgZG9jKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZSB0YXJnZXQgaXMgaW5zaWRlIHRoZSBtZW51IGNvbnRlbnRzLCBsZXQgdGhlIGJyb3dzZXJcbiAgICAgKiBmb2N1cyBhcyBub3JtYWwgYW5kIGtlZXAgYSBsb2cgb2YgdGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50LlxuICAgICAqL1xuICAgIGlmICh0aGlzLmVsLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgIHRoaXMubGFzdEZvY3VzID0gdGFyZ2V0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogT3RoZXJ3aXNlLCB3ZSBhcmUgYWJvdXQgdG8gaGF2ZSBmb2N1cyBnbyBvdXQgb2YgdGhlIG1lbnUuXG4gICAgICAgKiBXcmFwIHRoZSBmb2N1cyB0byBlaXRoZXIgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgLyoqXG4gICAgICAgKiBPbmNlIHdlIGNhbGwgYGZvY3VzRmlyc3REZXNjZW5kYW50YCwgYW5vdGhlciBmb2N1cyBldmVudFxuICAgICAgICogd2lsbCBmaXJlLCB3aGljaCB3aWxsIGNhdXNlIGBsYXN0Rm9jdXNgIHRvIGJlIHVwZGF0ZWRcbiAgICAgICAqIGJlZm9yZSB3ZSBjYW4gcnVuIHRoZSBjb2RlIGFmdGVyIHRoYXQuIFdlIGNhY2hlIHRoZSB2YWx1ZVxuICAgICAgICogaGVyZSB0byBhdm9pZCB0aGF0LlxuICAgICAgICovXG4gICAgICB0aGlzLmZvY3VzRmlyc3REZXNjZW5kYW50KCk7XG4gICAgICAvKipcbiAgICAgICAqIElmIHRoZSBjYWNoZWQgbGFzdCBmb2N1c2VkIGVsZW1lbnQgaXMgdGhlIHNhbWUgYXMgdGhlIG5vdy1cbiAgICAgICAqIGFjdGl2ZSBlbGVtZW50LCB0aGF0IG1lYW5zIHRoZSB1c2VyIHdhcyBvbiB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAgICogYWxyZWFkeSBhbmQgcHJlc3NlZCBTaGlmdCArIFRhYiwgc28gd2UgbmVlZCB0byB3cmFwIHRvIHRoZVxuICAgICAgICogbGFzdCBkZXNjZW5kYW50LlxuICAgICAgICovXG4gICAgICBpZiAodGhpcy5sYXN0Rm9jdXMgPT09IGRvYy5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZm9jdXNMYXN0RGVzY2VuZGFudCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyBfc2V0T3BlbihzaG91bGRPcGVuLCBhbmltYXRlZCA9IHRydWUpIHtcbiAgICAvLyBJZiB0aGUgbWVudSBpcyBkaXNhYmxlZCBvciBpdCBpcyBjdXJyZW50bHkgYmVpbmcgYW5pbWF0ZWQsIGxldCdzIGRvIG5vdGhpbmdcbiAgICBpZiAoIXRoaXMuX2lzQWN0aXZlKCkgfHwgdGhpcy5pc0FuaW1hdGluZyB8fCBzaG91bGRPcGVuID09PSB0aGlzLl9pc09wZW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5iZWZvcmVBbmltYXRpb24oc2hvdWxkT3Blbik7XG4gICAgYXdhaXQgdGhpcy5sb2FkQW5pbWF0aW9uKCk7XG4gICAgYXdhaXQgdGhpcy5zdGFydEFuaW1hdGlvbihzaG91bGRPcGVuLCBhbmltYXRlZCk7XG4gICAgdGhpcy5hZnRlckFuaW1hdGlvbihzaG91bGRPcGVuKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3luYyBsb2FkQW5pbWF0aW9uKCkge1xuICAgIC8vIE1lbnUgc3dpcGUgYW5pbWF0aW9uIHRha2VzIHRoZSBtZW51J3MgaW5uZXIgd2lkdGggYXMgcGFyYW1ldGVyLFxuICAgIC8vIElmIGBvZmZzZXRXaWR0aGAgY2hhbmdlcywgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgYW5pbWF0aW9uLlxuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5tZW51SW5uZXJFbC5vZmZzZXRXaWR0aDtcbiAgICBpZiAod2lkdGggPT09IHRoaXMud2lkdGggJiYgdGhpcy5hbmltYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgLy8gRGVzdHJveSBleGlzdGluZyBhbmltYXRpb25cbiAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgbmV3IGFuaW1hdGlvblxuICAgIHRoaXMuYW5pbWF0aW9uID0gYXdhaXQgbWVudUNvbnRyb2xsZXIuX2NyZWF0ZUFuaW1hdGlvbih0aGlzLnR5cGUsIHRoaXMpO1xuICAgIGlmICghY29uZmlnLmdldEJvb2xlYW4oJ2FuaW1hdGVkJywgdHJ1ZSkpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uLmR1cmF0aW9uKDApO1xuICAgIH1cbiAgICB0aGlzLmFuaW1hdGlvbi5maWxsKCdib3RoJyk7XG4gIH1cbiAgYXN5bmMgc3RhcnRBbmltYXRpb24oc2hvdWxkT3BlbiwgYW5pbWF0ZWQpIHtcbiAgICBjb25zdCBpc1JldmVyc2VkID0gIXNob3VsZE9wZW47XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgZWFzaW5nID0gbW9kZSA9PT0gJ2lvcycgPyBpb3NFYXNpbmcgOiBtZEVhc2luZztcbiAgICBjb25zdCBlYXNpbmdSZXZlcnNlID0gbW9kZSA9PT0gJ2lvcycgPyBpb3NFYXNpbmdSZXZlcnNlIDogbWRFYXNpbmdSZXZlcnNlO1xuICAgIGNvbnN0IGFuaSA9IHRoaXMuYW5pbWF0aW9uXG4gICAgICAuZGlyZWN0aW9uKGlzUmV2ZXJzZWQgPyAncmV2ZXJzZScgOiAnbm9ybWFsJylcbiAgICAgIC5lYXNpbmcoaXNSZXZlcnNlZCA/IGVhc2luZ1JldmVyc2UgOiBlYXNpbmcpXG4gICAgICAub25GaW5pc2goKCkgPT4ge1xuICAgICAgaWYgKGFuaS5nZXREaXJlY3Rpb24oKSA9PT0gJ3JldmVyc2UnKSB7XG4gICAgICAgIGFuaS5kaXJlY3Rpb24oJ25vcm1hbCcpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChhbmltYXRlZCkge1xuICAgICAgYXdhaXQgYW5pLnBsYXkoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBhbmkucGxheSh7IHN5bmM6IHRydWUgfSk7XG4gICAgfVxuICB9XG4gIF9pc0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQgJiYgIXRoaXMuaXNQYW5lVmlzaWJsZTtcbiAgfVxuICBjYW5Td2lwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zd2lwZUdlc3R1cmUgJiYgIXRoaXMuaXNBbmltYXRpbmcgJiYgdGhpcy5faXNBY3RpdmUoKTtcbiAgfVxuICBjYW5TdGFydChkZXRhaWwpIHtcbiAgICAvLyBEbyBub3QgYWxsb3cgc3dpcGUgZ2VzdHVyZSBpZiBhIG1vZGFsIGlzIG9wZW5cbiAgICBjb25zdCBpc01vZGFsUHJlc2VudGVkID0gISFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tbW9kYWwuc2hvdy1tb2RhbCcpO1xuICAgIGlmIChpc01vZGFsUHJlc2VudGVkIHx8ICF0aGlzLmNhblN3aXBlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2lzT3Blbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAvLyBUT0RPIGVycm9yXG4gICAgfVxuICAgIGVsc2UgaWYgKG1lbnVDb250cm9sbGVyLl9nZXRPcGVuU3luYygpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBjaGVja0VkZ2VTaWRlKHdpbmRvdywgZGV0YWlsLmN1cnJlbnRYLCB0aGlzLmlzRW5kU2lkZSwgdGhpcy5tYXhFZGdlU3RhcnQpO1xuICB9XG4gIG9uV2lsbFN0YXJ0KCkge1xuICAgIHRoaXMuYmVmb3JlQW5pbWF0aW9uKCF0aGlzLl9pc09wZW4pO1xuICAgIHJldHVybiB0aGlzLmxvYWRBbmltYXRpb24oKTtcbiAgfVxuICBvblN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5pc0FuaW1hdGluZyB8fCAhdGhpcy5hbmltYXRpb24pIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ2lzQW5pbWF0aW5nIGhhcyB0byBiZSB0cnVlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHRoZSBjbG9uZWQgYW5pbWF0aW9uIHNob3VsZCBub3QgdXNlIGFuIGVhc2luZyBjdXJ2ZSBkdXJpbmcgc2Vla1xuICAgIHRoaXMuYW5pbWF0aW9uLnByb2dyZXNzU3RhcnQodHJ1ZSwgdGhpcy5faXNPcGVuID8gMSA6IDApO1xuICB9XG4gIG9uTW92ZShkZXRhaWwpIHtcbiAgICBpZiAoIXRoaXMuaXNBbmltYXRpbmcgfHwgIXRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdpc0FuaW1hdGluZyBoYXMgdG8gYmUgdHJ1ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkZWx0YSA9IGNvbXB1dGVEZWx0YShkZXRhaWwuZGVsdGFYLCB0aGlzLl9pc09wZW4sIHRoaXMuaXNFbmRTaWRlKTtcbiAgICBjb25zdCBzdGVwVmFsdWUgPSBkZWx0YSAvIHRoaXMud2lkdGg7XG4gICAgdGhpcy5hbmltYXRpb24ucHJvZ3Jlc3NTdGVwKHRoaXMuX2lzT3BlbiA/IDEgLSBzdGVwVmFsdWUgOiBzdGVwVmFsdWUpO1xuICB9XG4gIG9uRW5kKGRldGFpbCkge1xuICAgIGlmICghdGhpcy5pc0FuaW1hdGluZyB8fCAhdGhpcy5hbmltYXRpb24pIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ2lzQW5pbWF0aW5nIGhhcyB0byBiZSB0cnVlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzT3BlbiA9IHRoaXMuX2lzT3BlbjtcbiAgICBjb25zdCBpc0VuZFNpZGUgPSB0aGlzLmlzRW5kU2lkZTtcbiAgICBjb25zdCBkZWx0YSA9IGNvbXB1dGVEZWx0YShkZXRhaWwuZGVsdGFYLCBpc09wZW4sIGlzRW5kU2lkZSk7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLndpZHRoO1xuICAgIGNvbnN0IHN0ZXBWYWx1ZSA9IGRlbHRhIC8gd2lkdGg7XG4gICAgY29uc3QgdmVsb2NpdHkgPSBkZXRhaWwudmVsb2NpdHlYO1xuICAgIGNvbnN0IHogPSB3aWR0aCAvIDIuMDtcbiAgICBjb25zdCBzaG91bGRDb21wbGV0ZVJpZ2h0ID0gdmVsb2NpdHkgPj0gMCAmJiAodmVsb2NpdHkgPiAwLjIgfHwgZGV0YWlsLmRlbHRhWCA+IHopO1xuICAgIGNvbnN0IHNob3VsZENvbXBsZXRlTGVmdCA9IHZlbG9jaXR5IDw9IDAgJiYgKHZlbG9jaXR5IDwgLTAuMiB8fCBkZXRhaWwuZGVsdGFYIDwgLXopO1xuICAgIGNvbnN0IHNob3VsZENvbXBsZXRlID0gaXNPcGVuXG4gICAgICA/IGlzRW5kU2lkZVxuICAgICAgICA/IHNob3VsZENvbXBsZXRlUmlnaHRcbiAgICAgICAgOiBzaG91bGRDb21wbGV0ZUxlZnRcbiAgICAgIDogaXNFbmRTaWRlXG4gICAgICAgID8gc2hvdWxkQ29tcGxldGVMZWZ0XG4gICAgICAgIDogc2hvdWxkQ29tcGxldGVSaWdodDtcbiAgICBsZXQgc2hvdWxkT3BlbiA9ICFpc09wZW4gJiYgc2hvdWxkQ29tcGxldGU7XG4gICAgaWYgKGlzT3BlbiAmJiAhc2hvdWxkQ29tcGxldGUpIHtcbiAgICAgIHNob3VsZE9wZW4gPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmxhc3RPbkVuZCA9IGRldGFpbC5jdXJyZW50VGltZTtcbiAgICAvLyBBY2NvdW50IGZvciByb3VuZGluZyBlcnJvcnMgaW4gSlNcbiAgICBsZXQgbmV3U3RlcFZhbHVlID0gc2hvdWxkQ29tcGxldGUgPyAwLjAwMSA6IC0wLjAwMTtcbiAgICAvKipcbiAgICAgKiBUT0RPOiBzdGVwVmFsdWUgY2FuIHNvbWV0aW1lcyByZXR1cm4gYSBuZWdhdGl2ZVxuICAgICAqIHZhbHVlLCBidXQgeW91IGNhbid0IGhhdmUgYSBuZWdhdGl2ZSB0aW1lIHZhbHVlXG4gICAgICogZm9yIHRoZSBjdWJpYyBiZXppZXIgY3VydmUgKGF0IGxlYXN0IHdpdGggd2ViIGFuaW1hdGlvbnMpXG4gICAgICogTm90IHN1cmUgaWYgdGhlIG5lZ2F0aXZlIHN0ZXAgdmFsdWUgaXMgYW4gZXJyb3Igb3Igbm90XG4gICAgICovXG4gICAgY29uc3QgYWRqdXN0ZWRTdGVwVmFsdWUgPSBzdGVwVmFsdWUgPCAwID8gMC4wMSA6IHN0ZXBWYWx1ZTtcbiAgICAvKipcbiAgICAgKiBBbmltYXRpb24gd2lsbCBiZSByZXZlcnNlZCBoZXJlLCBzbyBuZWVkIHRvXG4gICAgICogcmV2ZXJzZSB0aGUgZWFzaW5nIGN1cnZlIGFzIHdlbGxcbiAgICAgKlxuICAgICAqIEFkZGl0aW9uYWxseSwgd2UgbmVlZCB0byBhY2NvdW50IGZvciB0aGUgdGltZSByZWxhdGl2ZVxuICAgICAqIHRvIHRoZSBuZXcgZWFzaW5nIGN1cnZlLCBhcyBgc3RlcFZhbHVlYCBpcyBnb2luZyB0byBiZSBnaXZlblxuICAgICAqIGluIHRlcm1zIG9mIGEgbGluZWFyIGN1cnZlLlxuICAgICAqL1xuICAgIG5ld1N0ZXBWYWx1ZSArPVxuICAgICAgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24oWzAsIDBdLCBbMC40LCAwXSwgWzAuNiwgMV0sIFsxLCAxXSwgY2xhbXAoMCwgYWRqdXN0ZWRTdGVwVmFsdWUsIDAuOTk5OSkpWzBdIHx8IDA7XG4gICAgY29uc3QgcGxheVRvID0gdGhpcy5faXNPcGVuID8gIXNob3VsZENvbXBsZXRlIDogc2hvdWxkQ29tcGxldGU7XG4gICAgdGhpcy5hbmltYXRpb25cbiAgICAgIC5lYXNpbmcoJ2N1YmljLWJlemllcigwLjQsIDAuMCwgMC42LCAxKScpXG4gICAgICAub25GaW5pc2goKCkgPT4gdGhpcy5hZnRlckFuaW1hdGlvbihzaG91bGRPcGVuKSwgeyBvbmVUaW1lQ2FsbGJhY2s6IHRydWUgfSlcbiAgICAgIC5wcm9ncmVzc0VuZChwbGF5VG8gPyAxIDogMCwgdGhpcy5faXNPcGVuID8gMSAtIG5ld1N0ZXBWYWx1ZSA6IG5ld1N0ZXBWYWx1ZSwgMzAwKTtcbiAgfVxuICBiZWZvcmVBbmltYXRpb24oc2hvdWxkT3Blbikge1xuICAgIGFzc2VydCghdGhpcy5pc0FuaW1hdGluZywgJ19iZWZvcmUoKSBzaG91bGQgbm90IGJlIGNhbGxlZCB3aGlsZSBhbmltYXRpbmcnKTtcbiAgICAvLyB0aGlzIHBsYWNlcyB0aGUgbWVudSBpbnRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uIGJlZm9yZSBpdCBhbmltYXRlcyBpblxuICAgIC8vIHRoaXMgY3NzIGNsYXNzIGRvZXNuJ3QgYWN0dWFsbHkga2ljayBvZmYgYW55IGFuaW1hdGlvbnNcbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQoU0hPV19NRU5VKTtcbiAgICAvKipcbiAgICAgKiBXZSBhZGQgYSB0YWJpbmRleCBoZXJlIHNvIHRoYXQgZm9jdXMgdHJhcHBpbmdcbiAgICAgKiBzdGlsbCB3b3JrcyBldmVuIGlmIHRoZSBtZW51IGRvZXMgbm90IGhhdmVcbiAgICAgKiBhbnkgZm9jdXNhYmxlIGVsZW1lbnRzIHNsb3R0ZWQgaW5zaWRlLiBUaGVcbiAgICAgKiBmb2N1cyB0cmFwcGluZyB1dGlsaXR5IHdpbGwgZmFsbGJhY2sgdG8gZm9jdXNpbmdcbiAgICAgKiB0aGUgbWVudSBzbyBmb2N1cyBkb2VzIG5vdCBsZWF2ZSB3aGVuIHRoZSBtZW51XG4gICAgICogaXMgb3Blbi5cbiAgICAgKi9cbiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgIGlmICh0aGlzLmJhY2tkcm9wRWwpIHtcbiAgICAgIHRoaXMuYmFja2Ryb3BFbC5jbGFzc0xpc3QuYWRkKFNIT1dfQkFDS0RST1ApO1xuICAgIH1cbiAgICB0aGlzLmJsb2NrZXIuYmxvY2soKTtcbiAgICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBpZiAoc2hvdWxkT3Blbikge1xuICAgICAgdGhpcy5pb25XaWxsT3Blbi5lbWl0KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pb25XaWxsQ2xvc2UuZW1pdCgpO1xuICAgIH1cbiAgfVxuICBhZnRlckFuaW1hdGlvbihpc09wZW4pIHtcbiAgICB2YXIgX2E7XG4gICAgYXNzZXJ0KHRoaXMuaXNBbmltYXRpbmcsICdfYmVmb3JlKCkgc2hvdWxkIGJlIGNhbGxlZCB3aGlsZSBhbmltYXRpbmcnKTtcbiAgICAvLyBrZWVwIG9wZW5pbmcvY2xvc2luZyB0aGUgbWVudSBkaXNhYmxlZCBmb3IgYSB0b3VjaCBtb3JlIHlldFxuICAgIC8vIG9ubHkgYWRkIGxpc3RlbmVycy9jc3MgaWYgaXQncyBlbmFibGVkIGFuZCBpc09wZW5cbiAgICAvLyBhbmQgb25seSByZW1vdmUgbGlzdGVuZXJzL2NzcyBpZiBpdCdzIG5vdCBvcGVuXG4gICAgLy8gZW1pdCBvcGVuZWQvY2xvc2VkIGV2ZW50c1xuICAgIHRoaXMuX2lzT3BlbiA9IGlzT3BlbjtcbiAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLl9pc09wZW4pIHtcbiAgICAgIHRoaXMuYmxvY2tlci51bmJsb2NrKCk7XG4gICAgfVxuICAgIGlmIChpc09wZW4pIHtcbiAgICAgIC8vIGFkZCBjc3MgY2xhc3MgYW5kIGhpZGUgY29udGVudCBiZWhpbmQgbWVudSBmcm9tIHNjcmVlbiByZWFkZXJzXG4gICAgICBpZiAodGhpcy5jb250ZW50RWwpIHtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuY2xhc3NMaXN0LmFkZChNRU5VX0NPTlRFTlRfT1BFTik7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRoZSBtZW51IGlzIG9wZW4gYW5kIG92ZXJsYXlpbmcgdGhlIG1haW5cbiAgICAgICAgICogY29udGVudCwgdGhlIG1haW4gY29udGVudCBzaG91bGQgbm90IGJlIGFubm91bmNlZFxuICAgICAgICAgKiBieSB0aGUgc2NyZWVucmVhZGVyIGFzIHRoZSBtZW51IGlzIHRoZSBtYWluXG4gICAgICAgICAqIGZvY3VzLiBUaGlzIGlzIHVzZWZ1bCB3aXRoIHNjcmVlbnJlYWRlcnMgdGhhdCBoYXZlXG4gICAgICAgICAqIFwicmVhZCBmcm9tIHRvcFwiIGdlc3R1cmVzIHRoYXQgcmVhZCB0aGUgZW50aXJlXG4gICAgICAgICAqIHBhZ2UgZnJvbSB0b3AgdG8gYm90dG9tIHdoZW4gYWN0aXZhdGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb250ZW50RWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICB9XG4gICAgICAvLyBlbWl0IG9wZW4gZXZlbnRcbiAgICAgIHRoaXMuaW9uRGlkT3Blbi5lbWl0KCk7XG4gICAgICAvKipcbiAgICAgICAqIE1vdmUgZm9jdXMgdG8gdGhlIG1lbnUgdG8gcHJlcGFyZSBmb2N1cyB0cmFwcGluZywgYXMgbG9uZyBhc1xuICAgICAgICogaXQgaXNuJ3QgYWxyZWFkeSBmb2N1c2VkLiBVc2UgdGhlIGhvc3QgZWxlbWVudCBpbnN0ZWFkIG9mIHRoZVxuICAgICAgICogZmlyc3QgZGVzY2VuZGFudCB0byBhdm9pZCB0aGUgc2Nyb2xsIHBvc2l0aW9uIGp1bXBpbmcgYXJvdW5kLlxuICAgICAgICovXG4gICAgICBjb25zdCBmb2N1c2VkTWVudSA9IChfYSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZXN0KCdpb24tbWVudScpO1xuICAgICAgaWYgKGZvY3VzZWRNZW51ICE9PSB0aGlzLmVsKSB7XG4gICAgICAgIHRoaXMuZWwuZm9jdXMoKTtcbiAgICAgIH1cbiAgICAgIC8vIHN0YXJ0IGZvY3VzIHRyYXBwaW5nXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIHJlbW92ZSBjc3MgY2xhc3NlcyBhbmQgdW5oaWRlIGNvbnRlbnQgZnJvbSBzY3JlZW4gcmVhZGVyc1xuICAgICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKFNIT1dfTUVOVSk7XG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSB0YWJpbmRleCBmcm9tIHRoZSBtZW51IGNvbXBvbmVudFxuICAgICAgICogc28gdGhhdCBpcyBjYW5ub3QgYmUgdGFiYmVkIHRvLlxuICAgICAgICovXG4gICAgICB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgIGlmICh0aGlzLmNvbnRlbnRFbCkge1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5jbGFzc0xpc3QucmVtb3ZlKE1FTlVfQ09OVEVOVF9PUEVOKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBhcmlhLWhpZGRlbiBzbyBzY3JlZW4gcmVhZGVyc1xuICAgICAgICAgKiBjYW4gYW5ub3VuY2UgdGhlIG1haW4gY29udGVudCBhZ2FpblxuICAgICAgICAgKiBub3cgdGhhdCB0aGUgbWVudSBpcyBub3QgdGhlIG1haW4gZm9jdXMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5iYWNrZHJvcEVsKSB7XG4gICAgICAgIHRoaXMuYmFja2Ryb3BFbC5jbGFzc0xpc3QucmVtb3ZlKFNIT1dfQkFDS0RST1ApO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uLnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIC8vIGVtaXQgY2xvc2UgZXZlbnRcbiAgICAgIHRoaXMuaW9uRGlkQ2xvc2UuZW1pdCgpO1xuICAgICAgLy8gdW5kbyBmb2N1cyB0cmFwcGluZyBzbyBtdWx0aXBsZSBtZW51cyBkb24ndCBjb2xsaWRlXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVTdGF0ZSgpIHtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMuX2lzQWN0aXZlKCk7XG4gICAgaWYgKHRoaXMuZ2VzdHVyZSkge1xuICAgICAgdGhpcy5nZXN0dXJlLmVuYWJsZShpc0FjdGl2ZSAmJiB0aGlzLnN3aXBlR2VzdHVyZSk7XG4gICAgfVxuICAgIC8vIENsb3NlIG1lbnUgaW1tZWRpYXRlbHlcbiAgICBpZiAoIWlzQWN0aXZlICYmIHRoaXMuX2lzT3Blbikge1xuICAgICAgLy8gY2xvc2UgaWYgdGhpcyBtZW51IGlzIG9wZW4sIGFuZCBzaG91bGQgbm90IGJlIGVuYWJsZWRcbiAgICAgIHRoaXMuZm9yY2VDbG9zaW5nKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgbWVudUNvbnRyb2xsZXIuX3NldEFjdGl2ZU1lbnUodGhpcyk7XG4gICAgfVxuICAgIGFzc2VydCghdGhpcy5pc0FuaW1hdGluZywgJ2NhbiBub3QgYmUgYW5pbWF0aW5nJyk7XG4gIH1cbiAgZm9yY2VDbG9zaW5nKCkge1xuICAgIGFzc2VydCh0aGlzLl9pc09wZW4sICdtZW51IGNhbm5vdCBiZSBjbG9zZWQnKTtcbiAgICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBjb25zdCBhbmkgPSB0aGlzLmFuaW1hdGlvbi5kaXJlY3Rpb24oJ3JldmVyc2UnKTtcbiAgICBhbmkucGxheSh7IHN5bmM6IHRydWUgfSk7XG4gICAgdGhpcy5hZnRlckFuaW1hdGlvbihmYWxzZSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaXNFbmRTaWRlLCB0eXBlLCBkaXNhYmxlZCwgaXNQYW5lVmlzaWJsZSwgaW5oZXJpdGVkQXR0cmlidXRlcyB9ID0gdGhpcztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyByb2xlOiBcIm5hdmlnYXRpb25cIiwgXCJhcmlhLWxhYmVsXCI6IGluaGVyaXRlZEF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWwnXSB8fCAnbWVudScsIGNsYXNzOiB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgW2BtZW51LXR5cGUtJHt0eXBlfWBdOiB0cnVlLFxuICAgICAgICAnbWVudS1lbmFibGVkJzogIWRpc2FibGVkLFxuICAgICAgICAnbWVudS1zaWRlLWVuZCc6IGlzRW5kU2lkZSxcbiAgICAgICAgJ21lbnUtc2lkZS1zdGFydCc6ICFpc0VuZFNpZGUsXG4gICAgICAgICdtZW51LXBhbmUtdmlzaWJsZSc6IGlzUGFuZVZpc2libGUsXG4gICAgICB9IH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJtZW51LWlubmVyXCIsIHBhcnQ6IFwiY29udGFpbmVyXCIsIHJlZjogKGVsKSA9PiAodGhpcy5tZW51SW5uZXJFbCA9IGVsKSB9LCBoKFwic2xvdFwiLCBudWxsKSksIGgoXCJpb24tYmFja2Ryb3BcIiwgeyByZWY6IChlbCkgPT4gKHRoaXMuYmFja2Ryb3BFbCA9IGVsKSwgY2xhc3M6IFwibWVudS1iYWNrZHJvcFwiLCB0YXBwYWJsZTogZmFsc2UsIHN0b3BQcm9wYWdhdGlvbjogZmFsc2UsIHBhcnQ6IFwiYmFja2Ryb3BcIiB9KSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcInR5cGVcIjogW1widHlwZUNoYW5nZWRcIl0sXG4gICAgXCJkaXNhYmxlZFwiOiBbXCJkaXNhYmxlZENoYW5nZWRcIl0sXG4gICAgXCJzaWRlXCI6IFtcInNpZGVDaGFuZ2VkXCJdLFxuICAgIFwic3dpcGVHZXN0dXJlXCI6IFtcInN3aXBlR2VzdHVyZUNoYW5nZWRcIl1cbiAgfTsgfVxufTtcbmNvbnN0IGNvbXB1dGVEZWx0YSA9IChkZWx0YVgsIGlzT3BlbiwgaXNFbmRTaWRlKSA9PiB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBpc09wZW4gIT09IGlzRW5kU2lkZSA/IC1kZWx0YVggOiBkZWx0YVgpO1xufTtcbmNvbnN0IGNoZWNrRWRnZVNpZGUgPSAod2luLCBwb3NYLCBpc0VuZFNpZGUsIG1heEVkZ2VTdGFydCkgPT4ge1xuICBpZiAoaXNFbmRTaWRlKSB7XG4gICAgcmV0dXJuIHBvc1ggPj0gd2luLmlubmVyV2lkdGggLSBtYXhFZGdlU3RhcnQ7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIHBvc1ggPD0gbWF4RWRnZVN0YXJ0O1xuICB9XG59O1xuY29uc3QgU0hPV19NRU5VID0gJ3Nob3ctbWVudSc7XG5jb25zdCBTSE9XX0JBQ0tEUk9QID0gJ3Nob3ctYmFja2Ryb3AnO1xuY29uc3QgTUVOVV9DT05URU5UX09QRU4gPSAnbWVudS1jb250ZW50LW9wZW4nO1xuTWVudS5zdHlsZSA9IHtcbiAgaW9zOiBtZW51SW9zQ3NzLFxuICBtZDogbWVudU1kQ3NzXG59O1xuXG4vLyBHaXZlbiBhIG1lbnUsIHJldHVybiB3aGV0aGVyIG9yIG5vdCB0aGUgbWVudSB0b2dnbGUgc2hvdWxkIGJlIHZpc2libGVcbmNvbnN0IHVwZGF0ZVZpc2liaWxpdHkgPSBhc3luYyAobWVudSkgPT4ge1xuICBjb25zdCBtZW51RWwgPSBhd2FpdCBtZW51Q29udHJvbGxlci5nZXQobWVudSk7XG4gIHJldHVybiAhIShtZW51RWwgJiYgKGF3YWl0IG1lbnVFbC5pc0FjdGl2ZSgpKSk7XG59O1xuXG5jb25zdCBtZW51QnV0dG9uSW9zQ3NzID0gXCI6aG9zdHstLWJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7LS1jb2xvci1mb2N1c2VkOmN1cnJlbnRDb2xvcjstLWJvcmRlci1yYWRpdXM6aW5pdGlhbDstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWJvdHRvbTowO2NvbG9yOnZhcigtLWNvbG9yKTt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LWRlY29yYXRpb246bm9uZTt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3RleHQtdHJhbnNmb3JtOm5vbmU7d2hpdGUtc3BhY2U6bm93cmFwOy13ZWJraXQtZm9udC1rZXJuaW5nOm5vbmU7Zm9udC1rZXJuaW5nOm5vbmV9LmJ1dHRvbi1uYXRpdmV7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0O2xldHRlci1zcGFjaW5nOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOmluaGVyaXQ7dGV4dC1pbmRlbnQ6aW5oZXJpdDt0ZXh0LW92ZXJmbG93OmluaGVyaXQ7dGV4dC10cmFuc2Zvcm06aW5oZXJpdDt0ZXh0LWFsaWduOmluaGVyaXQ7d2hpdGUtc3BhY2U6aW5oZXJpdDtjb2xvcjppbmhlcml0O21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwYWRkaW5nLWxlZnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1yaWdodDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1mbG93OnJvdyBub3dyYXA7ZmxleC1mbG93OnJvdyBub3dyYXA7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlcjowO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2xpbmUtaGVpZ2h0OjE7Y3Vyc29yOnBvaW50ZXI7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTt6LWluZGV4OjA7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7LmJ1dHRvbi1uYXRpdmV7cGFkZGluZy1sZWZ0OnVuc2V0O3BhZGRpbmctcmlnaHQ6dW5zZXQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCl9fS5idXR0b24taW5uZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZmxvdzpyb3cgbm93cmFwO2ZsZXgtZmxvdzpyb3cgbm93cmFwOy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjF9aW9uLWljb257bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLXRvcDowO3BhZGRpbmctYm90dG9tOjA7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCgubWVudS1idXR0b24taGlkZGVuKXtkaXNwbGF5Om5vbmV9Omhvc3QoLm1lbnUtYnV0dG9uLWRpc2FibGVkKXtjdXJzb3I6ZGVmYXVsdDtvcGFjaXR5OjAuNTtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5pb24tZm9jdXNlZCkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItZm9jdXNlZCl9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWZvY3VzZWQpO29wYWNpdHk6dmFyKC0tYmFja2dyb3VuZC1mb2N1c2VkLW9wYWNpdHkpfS5idXR0b24tbmF0aXZlOjphZnRlcntsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTtjb250ZW50OlxcXCJcXFwiO29wYWNpdHk6MH1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItaG92ZXIpfTpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1ob3Zlcik7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHksIDApfX06aG9zdCguaW9uLWNvbG9yKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLXRvb2xiYXI6bm90KC5pbi10b29sYmFyLWNvbG9yKSl7Y29sb3I6dmFyKC0taW9uLXRvb2xiYXItY29sb3IsIHZhcigtLWNvbG9yKSl9Omhvc3R7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6Y3VycmVudENvbG9yOy0tYmFja2dyb3VuZC1mb2N1c2VkLW9wYWNpdHk6LjE7LS1ib3JkZXItcmFkaXVzOjRweDstLWNvbG9yOnZhcigtLWlvbi1jb2xvci1wcmltYXJ5LCAjMzg4MGZmKTstLXBhZGRpbmctc3RhcnQ6NXB4Oy0tcGFkZGluZy1lbmQ6NXB4O2hlaWdodDozMnB4O2ZvbnQtc2l6ZTozMXB4fTpob3N0KC5pb24tYWN0aXZhdGVkKXtvcGFjaXR5OjAuNH1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KDpob3Zlcil7b3BhY2l0eTowLjZ9fVwiO1xuXG5jb25zdCBtZW51QnV0dG9uTWRDc3MgPSBcIjpob3N0ey0tYmFja2dyb3VuZDp0cmFuc3BhcmVudDstLWNvbG9yLWZvY3VzZWQ6Y3VycmVudENvbG9yOy0tYm9yZGVyLXJhZGl1czppbml0aWFsOy0tcGFkZGluZy10b3A6MDstLXBhZGRpbmctYm90dG9tOjA7Y29sb3I6dmFyKC0tY29sb3IpO3RleHQtYWxpZ246Y2VudGVyO3RleHQtZGVjb3JhdGlvbjpub25lO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7dGV4dC10cmFuc2Zvcm06bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7LXdlYmtpdC1mb250LWtlcm5pbmc6bm9uZTtmb250LWtlcm5pbmc6bm9uZX0uYnV0dG9uLW5hdGl2ZXtib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOmluaGVyaXQ7Zm9udC1zdHlsZTppbmhlcml0O2ZvbnQtd2VpZ2h0OmluaGVyaXQ7bGV0dGVyLXNwYWNpbmc6aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWluZGVudDppbmhlcml0O3RleHQtb3ZlcmZsb3c6aW5oZXJpdDt0ZXh0LXRyYW5zZm9ybTppbmhlcml0O3RleHQtYWxpZ246aW5oZXJpdDt3aGl0ZS1zcGFjZTppbmhlcml0O2NvbG9yOmluaGVyaXQ7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO3BhZGRpbmctbGVmdDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLXJpZ2h0OnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLXRvcDp2YXIoLS1wYWRkaW5nLXRvcCk7cGFkZGluZy1ib3R0b206dmFyKC0tcGFkZGluZy1ib3R0b20pOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWZsb3c6cm93IG5vd3JhcDtmbGV4LWZsb3c6cm93IG5vd3JhcDstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjA7b3V0bGluZTpub25lO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7bGluZS1oZWlnaHQ6MTtjdXJzb3I6cG9pbnRlcjtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO3otaW5kZXg6MDstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmV9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXsuYnV0dG9uLW5hdGl2ZXtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7LXdlYmtpdC1wYWRkaW5nLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy1pbmxpbmUtZW5kOnZhcigtLXBhZGRpbmctZW5kKX19LmJ1dHRvbi1pbm5lcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1mbG93OnJvdyBub3dyYXA7ZmxleC1mbG93OnJvdyBub3dyYXA7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MX1pb24taWNvbnttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MDtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5tZW51LWJ1dHRvbi1oaWRkZW4pe2Rpc3BsYXk6bm9uZX06aG9zdCgubWVudS1idXR0b24tZGlzYWJsZWQpe2N1cnNvcjpkZWZhdWx0O29wYWNpdHk6MC41O3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1mb2N1c2VkKX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtZm9jdXNlZCk7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eSl9LmJ1dHRvbi1uYXRpdmU6OmFmdGVye2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFxcIlxcXCI7b3BhY2l0eTowfUBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcil7Omhvc3QoOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1ob3Zlcil9Omhvc3QoOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWhvdmVyKTtvcGFjaXR5OnZhcigtLWJhY2tncm91bmQtaG92ZXItb3BhY2l0eSwgMCl9fTpob3N0KC5pb24tY29sb3IpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCguaW4tdG9vbGJhcjpub3QoLmluLXRvb2xiYXItY29sb3IpKXtjb2xvcjp2YXIoLS1pb24tdG9vbGJhci1jb2xvciwgdmFyKC0tY29sb3IpKX06aG9zdHstLWJhY2tncm91bmQtZm9jdXNlZDpjdXJyZW50Q29sb3I7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTouMTI7LS1iYWNrZ3JvdW5kLWhvdmVyOmN1cnJlbnRDb2xvcjstLWJhY2tncm91bmQtaG92ZXItb3BhY2l0eTouMDQ7LS1ib3JkZXItcmFkaXVzOjUwJTstLWNvbG9yOmluaXRpYWw7LS1wYWRkaW5nLXN0YXJ0OjhweDstLXBhZGRpbmctZW5kOjhweDt3aWR0aDo0OHB4O2hlaWdodDo0OHB4O2ZvbnQtc2l6ZToyNHB4fTpob3N0KC5pb24tY29sb3IuaW9uLWZvY3VzZWQpOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pb24tY29sb3I6aG92ZXIpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX19XCI7XG5cbmNvbnN0IE1lbnVCdXR0b24gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IHt9O1xuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggdGhlIG1lbnUgYnV0dG9uLlxuICAgICAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBBdXRvbWF0aWNhbGx5IGhpZGVzIHRoZSBtZW51IGJ1dHRvbiB3aGVuIHRoZSBjb3JyZXNwb25kaW5nIG1lbnUgaXMgbm90IGFjdGl2ZVxuICAgICAqL1xuICAgIHRoaXMuYXV0b0hpZGUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBidXR0b24uXG4gICAgICovXG4gICAgdGhpcy50eXBlID0gJ2J1dHRvbic7XG4gICAgdGhpcy5vbkNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIG1lbnVDb250cm9sbGVyLnRvZ2dsZSh0aGlzLm1lbnUpO1xuICAgIH07XG4gIH1cbiAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgdGhpcy5pbmhlcml0ZWRBdHRyaWJ1dGVzID0gaW5oZXJpdEFyaWFBdHRyaWJ1dGVzKHRoaXMuZWwpO1xuICB9XG4gIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgdGhpcy52aXNpYmlsaXR5Q2hhbmdlZCgpO1xuICB9XG4gIGFzeW5jIHZpc2liaWxpdHlDaGFuZ2VkKCkge1xuICAgIHRoaXMudmlzaWJsZSA9IGF3YWl0IHVwZGF0ZVZpc2liaWxpdHkodGhpcy5tZW51KTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb2xvciwgZGlzYWJsZWQsIGluaGVyaXRlZEF0dHJpYnV0ZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgbWVudUljb24gPSBjb25maWcuZ2V0KCdtZW51SWNvbicsIG1vZGUgPT09ICdpb3MnID8gbWVudU91dGxpbmUgOiBtZW51U2hhcnApO1xuICAgIGNvbnN0IGhpZGRlbiA9IHRoaXMuYXV0b0hpZGUgJiYgIXRoaXMudmlzaWJsZTtcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICB9O1xuICAgIGNvbnN0IGFyaWFMYWJlbCA9IGluaGVyaXRlZEF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWwnXSB8fCAnbWVudSc7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgb25DbGljazogdGhpcy5vbkNsaWNrLCBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZWQgPyAndHJ1ZScgOiBudWxsLCBcImFyaWEtaGlkZGVuXCI6IGhpZGRlbiA/ICd0cnVlJyA6IG51bGwsIGNsYXNzOiBjcmVhdGVDb2xvckNsYXNzZXMoY29sb3IsIHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICBidXR0b246IHRydWUsXG4gICAgICAgICdtZW51LWJ1dHRvbi1oaWRkZW4nOiBoaWRkZW4sXG4gICAgICAgICdtZW51LWJ1dHRvbi1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAnaW4tdG9vbGJhcic6IGhvc3RDb250ZXh0KCdpb24tdG9vbGJhcicsIHRoaXMuZWwpLFxuICAgICAgICAnaW4tdG9vbGJhci1jb2xvcic6IGhvc3RDb250ZXh0KCdpb24tdG9vbGJhcltjb2xvcl0nLCB0aGlzLmVsKSxcbiAgICAgICAgJ2lvbi1hY3RpdmF0YWJsZSc6IHRydWUsXG4gICAgICAgICdpb24tZm9jdXNhYmxlJzogdHJ1ZSxcbiAgICAgIH0pIH0sIGgoXCJidXR0b25cIiwgT2JqZWN0LmFzc2lnbih7fSwgYXR0cnMsIHsgZGlzYWJsZWQ6IGRpc2FibGVkLCBjbGFzczogXCJidXR0b24tbmF0aXZlXCIsIHBhcnQ6IFwibmF0aXZlXCIsIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwgfSksIGgoXCJzcGFuXCIsIHsgY2xhc3M6IFwiYnV0dG9uLWlubmVyXCIgfSwgaChcInNsb3RcIiwgbnVsbCwgaChcImlvbi1pY29uXCIsIHsgcGFydDogXCJpY29uXCIsIGljb246IG1lbnVJY29uLCBtb2RlOiBtb2RlLCBsYXp5OiBmYWxzZSwgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiB9KSkpLCBtb2RlID09PSAnbWQnICYmIGgoXCJpb24tcmlwcGxlLWVmZmVjdFwiLCB7IHR5cGU6IFwidW5ib3VuZGVkXCIgfSkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbk1lbnVCdXR0b24uc3R5bGUgPSB7XG4gIGlvczogbWVudUJ1dHRvbklvc0NzcyxcbiAgbWQ6IG1lbnVCdXR0b25NZENzc1xufTtcblxuY29uc3QgbWVudVRvZ2dsZUNzcyA9IFwiOmhvc3QoLm1lbnUtdG9nZ2xlLWhpZGRlbil7ZGlzcGxheTpub25lfVwiO1xuXG5jb25zdCBNZW51VG9nZ2xlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBBdXRvbWF0aWNhbGx5IGhpZGVzIHRoZSBjb250ZW50IHdoZW4gdGhlIGNvcnJlc3BvbmRpbmcgbWVudSBpcyBub3QgYWN0aXZlLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCwgaXQncyBgdHJ1ZWAuIENoYW5nZSBpdCB0byBgZmFsc2VgIGluIG9yZGVyIHRvXG4gICAgICoga2VlcCBgaW9uLW1lbnUtdG9nZ2xlYCBhbHdheXMgdmlzaWJsZSByZWdhcmRsZXNzIHRoZSBzdGF0ZSBvZiB0aGUgbWVudS5cbiAgICAgKi9cbiAgICB0aGlzLmF1dG9IaWRlID0gdHJ1ZTtcbiAgICB0aGlzLm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gbWVudUNvbnRyb2xsZXIudG9nZ2xlKHRoaXMubWVudSk7XG4gICAgfTtcbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnZpc2liaWxpdHlDaGFuZ2VkKCk7XG4gIH1cbiAgYXN5bmMgdmlzaWJpbGl0eUNoYW5nZWQoKSB7XG4gICAgdGhpcy52aXNpYmxlID0gYXdhaXQgdXBkYXRlVmlzaWJpbGl0eSh0aGlzLm1lbnUpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCBoaWRkZW4gPSB0aGlzLmF1dG9IaWRlICYmICF0aGlzLnZpc2libGU7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgb25DbGljazogdGhpcy5vbkNsaWNrLCBcImFyaWEtaGlkZGVuXCI6IGhpZGRlbiA/ICd0cnVlJyA6IG51bGwsIGNsYXNzOiB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgJ21lbnUtdG9nZ2xlLWhpZGRlbic6IGhpZGRlbixcbiAgICAgIH0gfSwgaChcInNsb3RcIiwgbnVsbCkpKTtcbiAgfVxufTtcbk1lbnVUb2dnbGUuc3R5bGUgPSBtZW51VG9nZ2xlQ3NzO1xuXG5leHBvcnQgeyBNZW51IGFzIGlvbl9tZW51LCBNZW51QnV0dG9uIGFzIGlvbl9tZW51X2J1dHRvbiwgTWVudVRvZ2dsZSBhcyBpb25fbWVudV90b2dnbGUgfTtcbiIsIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5jb25zdCBob3N0Q29udGV4dCA9IChzZWxlY3RvciwgZWwpID0+IHtcbiAgcmV0dXJuIGVsLmNsb3Nlc3Qoc2VsZWN0b3IpICE9PSBudWxsO1xufTtcbi8qKlxuICogQ3JlYXRlIHRoZSBtb2RlIGFuZCBjb2xvciBjbGFzc2VzIGZvciB0aGUgY29tcG9uZW50IGJhc2VkIG9uIHRoZSBjbGFzc2VzIHBhc3NlZCBpblxuICovXG5jb25zdCBjcmVhdGVDb2xvckNsYXNzZXMgPSAoY29sb3IsIGNzc0NsYXNzTWFwKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnICYmIGNvbG9yLmxlbmd0aCA+IDBcbiAgICA/IE9iamVjdC5hc3NpZ24oeyAnaW9uLWNvbG9yJzogdHJ1ZSwgW2Bpb24tY29sb3ItJHtjb2xvcn1gXTogdHJ1ZSB9LCBjc3NDbGFzc01hcCkgOiBjc3NDbGFzc01hcDtcbn07XG5jb25zdCBnZXRDbGFzc0xpc3QgPSAoY2xhc3NlcykgPT4ge1xuICBpZiAoY2xhc3NlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgYXJyYXkgPSBBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4gYXJyYXlcbiAgICAgIC5maWx0ZXIoKGMpID0+IGMgIT0gbnVsbClcbiAgICAgIC5tYXAoKGMpID0+IGMudHJpbSgpKVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPT0gJycpO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5jb25zdCBnZXRDbGFzc01hcCA9IChjbGFzc2VzKSA9PiB7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBnZXRDbGFzc0xpc3QoY2xhc3NlcykuZm9yRWFjaCgoYykgPT4gKG1hcFtjXSA9IHRydWUpKTtcbiAgcmV0dXJuIG1hcDtcbn07XG5jb25zdCBTQ0hFTUUgPSAvXlthLXpdW2EtejAtOStcXC0uXSo6LztcbmNvbnN0IG9wZW5VUkwgPSBhc3luYyAodXJsLCBldiwgZGlyZWN0aW9uLCBhbmltYXRpb24pID0+IHtcbiAgaWYgKHVybCAhPSBudWxsICYmIHVybFswXSAhPT0gJyMnICYmICFTQ0hFTUUudGVzdCh1cmwpKSB7XG4gICAgY29uc3Qgcm91dGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpO1xuICAgIGlmIChyb3V0ZXIpIHtcbiAgICAgIGlmIChldiAhPSBudWxsKSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm91dGVyLnB1c2godXJsLCBkaXJlY3Rpb24sIGFuaW1hdGlvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUNvbG9yQ2xhc3NlcyBhcyBjLCBnZXRDbGFzc01hcCBhcyBnLCBob3N0Q29udGV4dCBhcyBoLCBvcGVuVVJMIGFzIG8gfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVnaXN0ZXJJbnN0YW5jZSIsImUiLCJjcmVhdGVFdmVudCIsImgiLCJIIiwiSG9zdCIsImkiLCJnZXRFbGVtZW50IiwiYyIsImNvbmZpZyIsImIiLCJnZXRJb25Nb2RlIiwiZyIsImdldFRpbWVHaXZlblByb2dyZXNzaW9uIiwiRyIsIkdFU1RVUkVfQ09OVFJPTExFUiIsIm8iLCJpc0VuZFNpZGUiLCJpbmhlcml0QXJpYUF0dHJpYnV0ZXMiLCJuIiwiYXNzZXJ0IiwibCIsImNsYW1wIiwibSIsIm1lbnVDb250cm9sbGVyIiwiayIsImdldE92ZXJsYXkiLCJ1IiwibWVudU91dGxpbmUiLCJ2IiwibWVudVNoYXJwIiwiY3JlYXRlQ29sb3JDbGFzc2VzIiwiaG9zdENvbnRleHQiLCJtZW51SW9zQ3NzIiwibWVudU1kQ3NzIiwiaW9zRWFzaW5nIiwibWRFYXNpbmciLCJpb3NFYXNpbmdSZXZlcnNlIiwibWRFYXNpbmdSZXZlcnNlIiwiZm9jdXNhYmxlUXVlcnlTdHJpbmciLCJNZW51IiwiY29uc3RydWN0b3IiLCJob3N0UmVmIiwiaW9uV2lsbE9wZW4iLCJpb25XaWxsQ2xvc2UiLCJpb25EaWRPcGVuIiwiaW9uRGlkQ2xvc2UiLCJpb25NZW51Q2hhbmdlIiwibGFzdE9uRW5kIiwiYmxvY2tlciIsImNyZWF0ZUJsb2NrZXIiLCJkaXNhYmxlU2Nyb2xsIiwiaXNBbmltYXRpbmciLCJfaXNPcGVuIiwiaW5oZXJpdGVkQXR0cmlidXRlcyIsImhhbmRsZUZvY3VzIiwiZXYiLCJsYXN0T3ZlcmxheSIsImRvY3VtZW50IiwiY29udGFpbnMiLCJlbCIsInRyYXBLZXlib2FyZEZvY3VzIiwiaXNQYW5lVmlzaWJsZSIsImRpc2FibGVkIiwic2lkZSIsInN3aXBlR2VzdHVyZSIsIm1heEVkZ2VTdGFydCIsInR5cGVDaGFuZ2VkIiwidHlwZSIsIm9sZFR5cGUiLCJjb250ZW50RWwiLCJ1bmRlZmluZWQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJtZW51SW5uZXJFbCIsImFuaW1hdGlvbiIsImRpc2FibGVkQ2hhbmdlZCIsInVwZGF0ZVN0YXRlIiwiZW1pdCIsIm9wZW4iLCJzaWRlQ2hhbmdlZCIsInN3aXBlR2VzdHVyZUNoYW5nZWQiLCJjb25uZWN0ZWRDYWxsYmFjayIsImN1c3RvbUVsZW1lbnRzIiwid2hlbkRlZmluZWQiLCJnZXQiLCJjb250ZW50IiwiY29udGVudElkIiwiZ2V0RWxlbWVudEJ5SWQiLCJjb25zb2xlIiwiZXJyb3IiLCJfcmVnaXN0ZXIiLCJnZXN0dXJlIiwiY3JlYXRlR2VzdHVyZSIsImdlc3R1cmVOYW1lIiwiZ2VzdHVyZVByaW9yaXR5IiwidGhyZXNob2xkIiwiYmx1ck9uU3RhcnQiLCJjYW5TdGFydCIsIm9uV2lsbFN0YXJ0Iiwib25TdGFydCIsIm9uTW92ZSIsIm9uRW5kIiwiY29tcG9uZW50V2lsbExvYWQiLCJjb21wb25lbnREaWRMb2FkIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJkZXN0cm95IiwiX3VucmVnaXN0ZXIiLCJiYWNrZHJvcEVsIiwib25TcGxpdFBhbmVDaGFuZ2VkIiwiZGV0YWlsIiwiaXNQYW5lIiwib25CYWNrZHJvcENsaWNrIiwidGltZVN0YW1wIiwic2hvdWxkQ2xvc2UiLCJjb21wb3NlZFBhdGgiLCJpbmNsdWRlcyIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2xvc2UiLCJvbktleWRvd24iLCJrZXkiLCJpc09wZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImlzQWN0aXZlIiwiX2lzQWN0aXZlIiwiYW5pbWF0ZWQiLCJzZXRPcGVuIiwidG9nZ2xlIiwic2hvdWxkT3BlbiIsIl9zZXRPcGVuIiwiZm9jdXNGaXJzdERlc2NlbmRhbnQiLCJmaXJzdElucHV0IiwicXVlcnlTZWxlY3RvciIsImZvY3VzIiwiZm9jdXNMYXN0RGVzY2VuZGFudCIsImlucHV0cyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsYXN0SW5wdXQiLCJsZW5ndGgiLCJkb2MiLCJ0YXJnZXQiLCJsYXN0Rm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiYmVmb3JlQW5pbWF0aW9uIiwibG9hZEFuaW1hdGlvbiIsInN0YXJ0QW5pbWF0aW9uIiwiYWZ0ZXJBbmltYXRpb24iLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiX2NyZWF0ZUFuaW1hdGlvbiIsImdldEJvb2xlYW4iLCJkdXJhdGlvbiIsImZpbGwiLCJpc1JldmVyc2VkIiwibW9kZSIsImVhc2luZyIsImVhc2luZ1JldmVyc2UiLCJhbmkiLCJkaXJlY3Rpb24iLCJvbkZpbmlzaCIsImdldERpcmVjdGlvbiIsInBsYXkiLCJzeW5jIiwiY2FuU3dpcGUiLCJpc01vZGFsUHJlc2VudGVkIiwiX2dldE9wZW5TeW5jIiwiY2hlY2tFZGdlU2lkZSIsIndpbmRvdyIsImN1cnJlbnRYIiwicHJvZ3Jlc3NTdGFydCIsImRlbHRhIiwiY29tcHV0ZURlbHRhIiwiZGVsdGFYIiwic3RlcFZhbHVlIiwicHJvZ3Jlc3NTdGVwIiwidmVsb2NpdHkiLCJ2ZWxvY2l0eVgiLCJ6Iiwic2hvdWxkQ29tcGxldGVSaWdodCIsInNob3VsZENvbXBsZXRlTGVmdCIsInNob3VsZENvbXBsZXRlIiwiY3VycmVudFRpbWUiLCJuZXdTdGVwVmFsdWUiLCJhZGp1c3RlZFN0ZXBWYWx1ZSIsInBsYXlUbyIsIm9uZVRpbWVDYWxsYmFjayIsInByb2dyZXNzRW5kIiwiU0hPV19NRU5VIiwic2V0QXR0cmlidXRlIiwiU0hPV19CQUNLRFJPUCIsImJsb2NrIiwiX2EiLCJ1bmJsb2NrIiwiTUVOVV9DT05URU5UX09QRU4iLCJmb2N1c2VkTWVudSIsImNsb3Nlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbmFibGUiLCJmb3JjZUNsb3NpbmciLCJfc2V0QWN0aXZlTWVudSIsInJlbmRlciIsInJvbGUiLCJjbGFzcyIsInBhcnQiLCJyZWYiLCJ0YXBwYWJsZSIsIndhdGNoZXJzIiwiTWF0aCIsIm1heCIsIndpbiIsInBvc1giLCJpbm5lcldpZHRoIiwic3R5bGUiLCJpb3MiLCJtZCIsInVwZGF0ZVZpc2liaWxpdHkiLCJtZW51IiwibWVudUVsIiwibWVudUJ1dHRvbklvc0NzcyIsIm1lbnVCdXR0b25NZENzcyIsIk1lbnVCdXR0b24iLCJ2aXNpYmxlIiwiYXV0b0hpZGUiLCJvbkNsaWNrIiwidmlzaWJpbGl0eUNoYW5nZWQiLCJjb2xvciIsIm1lbnVJY29uIiwiaGlkZGVuIiwiYXR0cnMiLCJhcmlhTGFiZWwiLCJidXR0b24iLCJPYmplY3QiLCJhc3NpZ24iLCJpY29uIiwibGF6eSIsIm1lbnVUb2dnbGVDc3MiLCJNZW51VG9nZ2xlIiwiaW9uX21lbnUiLCJpb25fbWVudV9idXR0b24iLCJpb25fbWVudV90b2dnbGUiLCJzZWxlY3RvciIsImNzc0NsYXNzTWFwIiwiZ2V0Q2xhc3NMaXN0IiwiY2xhc3NlcyIsImFycmF5IiwiaXNBcnJheSIsInNwbGl0IiwiZmlsdGVyIiwibWFwIiwidHJpbSIsImdldENsYXNzTWFwIiwiZm9yRWFjaCIsIlNDSEVNRSIsIm9wZW5VUkwiLCJ1cmwiLCJ0ZXN0Iiwicm91dGVyIiwicHVzaCJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8iLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxXX0=